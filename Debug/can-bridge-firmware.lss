
can-bridge-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020a  00802000  00002134  000021c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c1  0080220a  0080220a  000023d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cd9b  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cf7  00000000  00000000  0000f6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ba7  00000000  00000000  000133f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001274  00000000  00000000  00017fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004dcf  00000000  00000000  00019214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067a4  00000000  00000000  0001dfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  00024787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
       2:	00 00       	nop
       4:	22 c1       	rjmp	.+580    	; 0x24a <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_2>
       c:	1e c1       	rjmp	.+572    	; 0x24a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c1       	rjmp	.+568    	; 0x24a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c1       	rjmp	.+564    	; 0x24a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c1       	rjmp	.+560    	; 0x24a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c1       	rjmp	.+556    	; 0x24a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c1       	rjmp	.+552    	; 0x24a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c1       	rjmp	.+548    	; 0x24a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c1       	rjmp	.+544    	; 0x24a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c1       	rjmp	.+540    	; 0x24a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c1       	rjmp	.+536    	; 0x24a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c1       	rjmp	.+532    	; 0x24a <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_14>
      3c:	06 c1       	rjmp	.+524    	; 0x24a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c1       	rjmp	.+520    	; 0x24a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c1       	rjmp	.+516    	; 0x24a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c1       	rjmp	.+512    	; 0x24a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c0       	rjmp	.+508    	; 0x24a <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_20>
      54:	fa c0       	rjmp	.+500    	; 0x24a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c0       	rjmp	.+496    	; 0x24a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c0       	rjmp	.+492    	; 0x24a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c0       	rjmp	.+488    	; 0x24a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c0       	rjmp	.+484    	; 0x24a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c0       	rjmp	.+480    	; 0x24a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c0       	rjmp	.+476    	; 0x24a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c0       	rjmp	.+472    	; 0x24a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c0       	rjmp	.+468    	; 0x24a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c0       	rjmp	.+464    	; 0x24a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c0       	rjmp	.+460    	; 0x24a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c0       	rjmp	.+456    	; 0x24a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c0       	rjmp	.+452    	; 0x24a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c0       	rjmp	.+448    	; 0x24a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c0       	rjmp	.+444    	; 0x24a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c0       	rjmp	.+440    	; 0x24a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c0       	rjmp	.+436    	; 0x24a <__bad_interrupt>
      96:	00 00       	nop
      98:	d8 c0       	rjmp	.+432    	; 0x24a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d6 c0       	rjmp	.+428    	; 0x24a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d4 c0       	rjmp	.+424    	; 0x24a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d2 c0       	rjmp	.+420    	; 0x24a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d0 c0       	rjmp	.+416    	; 0x24a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ce c0       	rjmp	.+412    	; 0x24a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c0       	rjmp	.+408    	; 0x24a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c0       	rjmp	.+404    	; 0x24a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c8 c0       	rjmp	.+400    	; 0x24a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c6 c0       	rjmp	.+396    	; 0x24a <__bad_interrupt>
      be:	00 00       	nop
      c0:	c4 c0       	rjmp	.+392    	; 0x24a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c2 c0       	rjmp	.+388    	; 0x24a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c0 c0       	rjmp	.+384    	; 0x24a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	be c0       	rjmp	.+380    	; 0x24a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bc c0       	rjmp	.+376    	; 0x24a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ba c0       	rjmp	.+372    	; 0x24a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b8 c0       	rjmp	.+368    	; 0x24a <__bad_interrupt>
      da:	00 00       	nop
      dc:	b6 c0       	rjmp	.+364    	; 0x24a <__bad_interrupt>
      de:	00 00       	nop
      e0:	b4 c0       	rjmp	.+360    	; 0x24a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b2 c0       	rjmp	.+356    	; 0x24a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b0 c0       	rjmp	.+352    	; 0x24a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ae c0       	rjmp	.+348    	; 0x24a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ac c0       	rjmp	.+344    	; 0x24a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	aa c0       	rjmp	.+340    	; 0x24a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a8 c0       	rjmp	.+336    	; 0x24a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a6 c0       	rjmp	.+332    	; 0x24a <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_64>
     104:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__vector_65>
     108:	a0 c0       	rjmp	.+320    	; 0x24a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9e c0       	rjmp	.+316    	; 0x24a <__bad_interrupt>
     10e:	00 00       	nop
     110:	9c c0       	rjmp	.+312    	; 0x24a <__bad_interrupt>
     112:	00 00       	nop
     114:	9a c0       	rjmp	.+308    	; 0x24a <__bad_interrupt>
     116:	00 00       	nop
     118:	98 c0       	rjmp	.+304    	; 0x24a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	96 c0       	rjmp	.+300    	; 0x24a <__bad_interrupt>
     11e:	00 00       	nop
     120:	94 c0       	rjmp	.+296    	; 0x24a <__bad_interrupt>
     122:	00 00       	nop
     124:	92 c0       	rjmp	.+292    	; 0x24a <__bad_interrupt>
     126:	00 00       	nop
     128:	90 c0       	rjmp	.+288    	; 0x24a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8e c0       	rjmp	.+284    	; 0x24a <__bad_interrupt>
     12e:	00 00       	nop
     130:	8c c0       	rjmp	.+280    	; 0x24a <__bad_interrupt>
     132:	00 00       	nop
     134:	8a c0       	rjmp	.+276    	; 0x24a <__bad_interrupt>
     136:	00 00       	nop
     138:	88 c0       	rjmp	.+272    	; 0x24a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	86 c0       	rjmp	.+268    	; 0x24a <__bad_interrupt>
     13e:	00 00       	nop
     140:	84 c0       	rjmp	.+264    	; 0x24a <__bad_interrupt>
     142:	00 00       	nop
     144:	82 c0       	rjmp	.+260    	; 0x24a <__bad_interrupt>
     146:	00 00       	nop
     148:	80 c0       	rjmp	.+256    	; 0x24a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7e c0       	rjmp	.+252    	; 0x24a <__bad_interrupt>
     14e:	00 00       	nop
     150:	7c c0       	rjmp	.+248    	; 0x24a <__bad_interrupt>
     152:	00 00       	nop
     154:	7a c0       	rjmp	.+244    	; 0x24a <__bad_interrupt>
     156:	00 00       	nop
     158:	78 c0       	rjmp	.+240    	; 0x24a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	76 c0       	rjmp	.+236    	; 0x24a <__bad_interrupt>
     15e:	00 00       	nop
     160:	74 c0       	rjmp	.+232    	; 0x24a <__bad_interrupt>
     162:	00 00       	nop
     164:	72 c0       	rjmp	.+228    	; 0x24a <__bad_interrupt>
     166:	00 00       	nop
     168:	70 c0       	rjmp	.+224    	; 0x24a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6e c0       	rjmp	.+220    	; 0x24a <__bad_interrupt>
     16e:	00 00       	nop
     170:	6c c0       	rjmp	.+216    	; 0x24a <__bad_interrupt>
     172:	00 00       	nop
     174:	6a c0       	rjmp	.+212    	; 0x24a <__bad_interrupt>
     176:	00 00       	nop
     178:	68 c0       	rjmp	.+208    	; 0x24a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	66 c0       	rjmp	.+204    	; 0x24a <__bad_interrupt>
     17e:	00 00       	nop
     180:	64 c0       	rjmp	.+200    	; 0x24a <__bad_interrupt>
     182:	00 00       	nop
     184:	62 c0       	rjmp	.+196    	; 0x24a <__bad_interrupt>
     186:	00 00       	nop
     188:	60 c0       	rjmp	.+192    	; 0x24a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5e c0       	rjmp	.+188    	; 0x24a <__bad_interrupt>
     18e:	00 00       	nop
     190:	5c c0       	rjmp	.+184    	; 0x24a <__bad_interrupt>
     192:	00 00       	nop
     194:	5a c0       	rjmp	.+180    	; 0x24a <__bad_interrupt>
     196:	00 00       	nop
     198:	58 c0       	rjmp	.+176    	; 0x24a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	56 c0       	rjmp	.+172    	; 0x24a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	54 c0       	rjmp	.+168    	; 0x24a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	52 c0       	rjmp	.+164    	; 0x24a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	50 c0       	rjmp	.+160    	; 0x24a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4e c0       	rjmp	.+156    	; 0x24a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4c c0       	rjmp	.+152    	; 0x24a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4a c0       	rjmp	.+148    	; 0x24a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	48 c0       	rjmp	.+144    	; 0x24a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	46 c0       	rjmp	.+140    	; 0x24a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	44 c0       	rjmp	.+136    	; 0x24a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	42 c0       	rjmp	.+132    	; 0x24a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	40 c0       	rjmp	.+128    	; 0x24a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3e c0       	rjmp	.+124    	; 0x24a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3c c0       	rjmp	.+120    	; 0x24a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3a c0       	rjmp	.+116    	; 0x24a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	38 c0       	rjmp	.+112    	; 0x24a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	36 c0       	rjmp	.+108    	; 0x24a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	34 c0       	rjmp	.+104    	; 0x24a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	32 c0       	rjmp	.+100    	; 0x24a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	30 c0       	rjmp	.+96     	; 0x24a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2e c0       	rjmp	.+92     	; 0x24a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2c c0       	rjmp	.+88     	; 0x24a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a3 c7       	rjmp	.+3910   	; 0x113c <__vector_125>
     1f6:	00 00       	nop
     1f8:	28 c0       	rjmp	.+80     	; 0x24a <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	30 04       	cpc	r3, r0
     1fe:	54 04       	cpc	r5, r4
     200:	1c 05       	cpc	r17, r12
     202:	54 04       	cpc	r5, r4
     204:	1c 05       	cpc	r17, r12
     206:	8a 04       	cpc	r8, r10
     208:	9e 04       	cpc	r9, r14
     20a:	1c 05       	cpc	r17, r12
     20c:	f2 04       	cpc	r15, r2
     20e:	fb 04       	cpc	r15, r11

00000210 <__ctors_end>:
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df e2       	ldi	r29, 0x2F	; 47
     21a:	de bf       	out	0x3e, r29	; 62

0000021c <__do_copy_data>:
     21c:	12 e2       	ldi	r17, 0x22	; 34
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b0 e2       	ldi	r27, 0x20	; 32
     222:	e4 e3       	ldi	r30, 0x34	; 52
     224:	f1 e2       	ldi	r31, 0x21	; 33
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x10>
     228:	05 90       	lpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	aa 30       	cpi	r26, 0x0A	; 10
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0xc>

00000232 <__do_clear_bss>:
     232:	26 e2       	ldi	r18, 0x26	; 38
     234:	aa e0       	ldi	r26, 0x0A	; 10
     236:	b2 e2       	ldi	r27, 0x22	; 34
     238:	01 c0       	rjmp	.+2      	; 0x23c <.do_clear_bss_start>

0000023a <.do_clear_bss_loop>:
     23a:	1d 92       	st	X+, r1

0000023c <.do_clear_bss_start>:
     23c:	ab 3c       	cpi	r26, 0xCB	; 203
     23e:	b2 07       	cpc	r27, r18
     240:	e1 f7       	brne	.-8      	; 0x23a <.do_clear_bss_loop>
     242:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <main>
     246:	0c 94 98 10 	jmp	0x2130	; 0x2130 <_exit>

0000024a <__bad_interrupt>:
     24a:	da ce       	rjmp	.-588    	; 0x0 <__vectors>

0000024c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     24c:	29 2f       	mov	r18, r25
     24e:	33 27       	eor	r19, r19
     250:	22 30       	cpi	r18, 0x02	; 2
     252:	31 05       	cpc	r19, r1
     254:	59 f0       	breq	.+22     	; 0x26c <CALLBACK_USB_GetDescriptor+0x20>
     256:	23 30       	cpi	r18, 0x03	; 3
     258:	31 05       	cpc	r19, r1
     25a:	69 f0       	breq	.+26     	; 0x276 <CALLBACK_USB_GetDescriptor+0x2a>
     25c:	21 30       	cpi	r18, 0x01	; 1
     25e:	31 05       	cpc	r19, r1
     260:	09 f5       	brne	.+66     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x58>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     262:	82 e1       	ldi	r24, 0x12	; 18
     264:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     266:	29 e9       	ldi	r18, 0x99	; 153
     268:	31 e2       	ldi	r19, 0x21	; 33
     26a:	25 c0       	rjmp	.+74     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x6a>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     26c:	8e e3       	ldi	r24, 0x3E	; 62
     26e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     270:	2b e5       	ldi	r18, 0x5B	; 91
     272:	31 e2       	ldi	r19, 0x21	; 33
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     274:	20 c0       	rjmp	.+64     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x6a>
		case DTYPE_String:
			switch (DescriptorNumber)
     276:	99 27       	eor	r25, r25
     278:	81 30       	cpi	r24, 0x01	; 1
     27a:	91 05       	cpc	r25, r1
     27c:	49 f0       	breq	.+18     	; 0x290 <CALLBACK_USB_GetDescriptor+0x44>
     27e:	18 f0       	brcs	.+6      	; 0x286 <CALLBACK_USB_GetDescriptor+0x3a>
     280:	02 97       	sbiw	r24, 0x02	; 2
     282:	59 f0       	breq	.+22     	; 0x29a <CALLBACK_USB_GetDescriptor+0x4e>
     284:	14 c0       	rjmp	.+40     	; 0x2ae <CALLBACK_USB_GetDescriptor+0x62>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = LanguageString.Header.Size;
     286:	84 e0       	ldi	r24, 0x04	; 4
     288:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
     28a:	27 e5       	ldi	r18, 0x57	; 87
     28c:	31 e2       	ldi	r19, 0x21	; 33
     28e:	13 c0       	rjmp	.+38     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x6a>
					Size    = LanguageString.Header.Size;
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = ManufacturerString.Header.Size;
     290:	8c e1       	ldi	r24, 0x1C	; 28
     292:	90 e0       	ldi	r25, 0x00	; 0
				case 0x00:
					Address = &LanguageString;
					Size    = LanguageString.Header.Size;
					break;
				case 0x01:
					Address = &ManufacturerString;
     294:	29 e3       	ldi	r18, 0x39	; 57
     296:	31 e2       	ldi	r19, 0x21	; 33
					Size    = ManufacturerString.Header.Size;
					break;
     298:	0e c0       	rjmp	.+28     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x6a>
				case 0x02:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
     29a:	86 e1       	ldi	r24, 0x16	; 22
     29c:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = ManufacturerString.Header.Size;
					break;
				case 0x02:
					Address = &ProductString;
     29e:	21 e2       	ldi	r18, 0x21	; 33
     2a0:	31 e2       	ldi	r19, 0x21	; 33
					Size    = ProductString.Header.Size;
					break;
     2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x6a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x6a>
	uint16_t    Size    = NO_DESCRIPTOR;
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     2b6:	fa 01       	movw	r30, r20
     2b8:	20 83       	st	Z, r18
     2ba:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     2bc:	08 95       	ret

000002be <SID_to_str>:
		if(i == 3) *buffer++ = 46;
		*buffer++ = 48 + (num / res);
		num = num % res;
		res /= 10;
	}
}
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	dc 01       	movw	r26, r24
     2c4:	94 2f       	mov	r25, r20
     2c6:	9f 70       	andi	r25, 0x0F	; 15
     2c8:	9a 30       	cpi	r25, 0x0A	; 10
     2ca:	30 f0       	brcs	.+12     	; 0x2d8 <SID_to_str+0x1a>
     2cc:	fd 01       	movw	r30, r26
     2ce:	31 96       	adiw	r30, 0x01	; 1
     2d0:	99 5c       	subi	r25, 0xC9	; 201
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	9c 93       	st	X, r25
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <SID_to_str+0x24>
     2d8:	fd 01       	movw	r30, r26
     2da:	31 96       	adiw	r30, 0x01	; 1
     2dc:	90 5d       	subi	r25, 0xD0	; 208
     2de:	12 96       	adiw	r26, 0x02	; 2
     2e0:	9c 93       	st	X, r25
     2e2:	db 01       	movw	r26, r22
     2e4:	ca 01       	movw	r24, r20
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	99 27       	eor	r25, r25
     2ea:	aa 27       	eor	r26, r26
     2ec:	bb 27       	eor	r27, r27
     2ee:	68 94       	set
     2f0:	13 f8       	bld	r1, 3
     2f2:	b6 95       	lsr	r27
     2f4:	a7 95       	ror	r26
     2f6:	97 95       	ror	r25
     2f8:	87 95       	ror	r24
     2fa:	16 94       	lsr	r1
     2fc:	d1 f7       	brne	.-12     	; 0x2f2 <SID_to_str+0x34>
     2fe:	8a 30       	cpi	r24, 0x0A	; 10
     300:	28 f0       	brcs	.+10     	; 0x30c <SID_to_str+0x4e>
     302:	ef 01       	movw	r28, r30
     304:	21 97       	sbiw	r28, 0x01	; 1
     306:	89 5c       	subi	r24, 0xC9	; 201
     308:	80 83       	st	Z, r24
     30a:	04 c0       	rjmp	.+8      	; 0x314 <SID_to_str+0x56>
     30c:	ef 01       	movw	r28, r30
     30e:	21 97       	sbiw	r28, 0x01	; 1
     310:	80 5d       	subi	r24, 0xD0	; 208
     312:	80 83       	st	Z, r24
     314:	85 2f       	mov	r24, r21
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	8a 30       	cpi	r24, 0x0A	; 10
     31a:	18 f0       	brcs	.+6      	; 0x322 <SID_to_str+0x64>
     31c:	89 5c       	subi	r24, 0xC9	; 201
     31e:	88 83       	st	Y, r24
     320:	02 c0       	rjmp	.+4      	; 0x326 <SID_to_str+0x68>
     322:	80 5d       	subi	r24, 0xD0	; 208
     324:	88 83       	st	Y, r24
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <canframe_to_str>:
     32c:	af 92       	push	r10
     32e:	bf 92       	push	r11
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	2b 97       	sbiw	r28, 0x0b	; 11
     346:	cd bf       	out	0x3d, r28	; 61
     348:	de bf       	out	0x3e, r29	; 62
     34a:	c9 82       	std	Y+1, r12	; 0x01
     34c:	da 82       	std	Y+2, r13	; 0x02
     34e:	eb 82       	std	Y+3, r14	; 0x03
     350:	fc 82       	std	Y+4, r15	; 0x04
     352:	0d 83       	std	Y+5, r16	; 0x05
     354:	1e 83       	std	Y+6, r17	; 0x06
     356:	2f 83       	std	Y+7, r18	; 0x07
     358:	38 87       	std	Y+8, r19	; 0x08
     35a:	49 87       	std	Y+9, r20	; 0x09
     35c:	5a 87       	std	Y+10, r21	; 0x0a
     35e:	6b 87       	std	Y+11, r22	; 0x0b
     360:	ee 20       	and	r14, r14
     362:	69 f1       	breq	.+90     	; 0x3be <canframe_to_str+0x92>
     364:	de 01       	movw	r26, r28
     366:	14 96       	adiw	r26, 0x04	; 4
     368:	5c 01       	movw	r10, r24
     36a:	ac 01       	movw	r20, r24
     36c:	4f 5f       	subi	r20, 0xFF	; 255
     36e:	5f 4f       	sbci	r21, 0xFF	; 255
     370:	ea 94       	dec	r14
     372:	8e 01       	movw	r16, r28
     374:	0e 0d       	add	r16, r14
     376:	11 1d       	adc	r17, r1
     378:	0b 5f       	subi	r16, 0xFB	; 251
     37a:	1f 4f       	sbci	r17, 0xFF	; 255
     37c:	9d 91       	ld	r25, X+
     37e:	29 2f       	mov	r18, r25
     380:	22 95       	swap	r18
     382:	2f 70       	andi	r18, 0x0F	; 15
     384:	2a 30       	cpi	r18, 0x0A	; 10
     386:	28 f0       	brcs	.+10     	; 0x392 <canframe_to_str+0x66>
     388:	ba 01       	movw	r22, r20
     38a:	29 5c       	subi	r18, 0xC9	; 201
     38c:	f5 01       	movw	r30, r10
     38e:	20 83       	st	Z, r18
     390:	04 c0       	rjmp	.+8      	; 0x39a <canframe_to_str+0x6e>
     392:	ba 01       	movw	r22, r20
     394:	20 5d       	subi	r18, 0xD0	; 208
     396:	f5 01       	movw	r30, r10
     398:	20 83       	st	Z, r18
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	9a 30       	cpi	r25, 0x0A	; 10
     39e:	20 f0       	brcs	.+8      	; 0x3a8 <canframe_to_str+0x7c>
     3a0:	99 5c       	subi	r25, 0xC9	; 201
     3a2:	fb 01       	movw	r30, r22
     3a4:	90 83       	st	Z, r25
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <canframe_to_str+0x82>
     3a8:	90 5d       	subi	r25, 0xD0	; 208
     3aa:	fb 01       	movw	r30, r22
     3ac:	90 83       	st	Z, r25
     3ae:	f2 e0       	ldi	r31, 0x02	; 2
     3b0:	af 0e       	add	r10, r31
     3b2:	b1 1c       	adc	r11, r1
     3b4:	4e 5f       	subi	r20, 0xFE	; 254
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	a0 17       	cp	r26, r16
     3ba:	b1 07       	cpc	r27, r17
     3bc:	f9 f6       	brne	.-66     	; 0x37c <canframe_to_str+0x50>
     3be:	2b 96       	adiw	r28, 0x0b	; 11
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	08 95       	ret

000003da <calc_crc8>:
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	ec 01       	movw	r28, r24
     3e0:	dc 01       	movw	r26, r24
     3e2:	13 96       	adiw	r26, 0x03	; 3
     3e4:	9c 01       	movw	r18, r24
     3e6:	26 5f       	subi	r18, 0xF6	; 246
     3e8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	9d 91       	ld	r25, X+
     3ee:	e9 27       	eor	r30, r25
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	e0 50       	subi	r30, 0x00	; 0
     3f4:	f0 4e       	sbci	r31, 0xE0	; 224
     3f6:	e0 81       	ld	r30, Z
     3f8:	a2 17       	cp	r26, r18
     3fa:	b3 07       	cpc	r27, r19
     3fc:	b9 f7       	brne	.-18     	; 0x3ec <calc_crc8+0x12>
     3fe:	ea 87       	std	Y+10, r30	; 0x0a
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <int_to_4digit_nodec>:

//... without decimal point
void int_to_4digit_nodec(int num, char * buffer){
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	9c 01       	movw	r18, r24
     40c:	99 23       	and	r25, r25
     40e:	24 f4       	brge	.+8      	; 0x418 <int_to_4digit_nodec+0x12>
     410:	22 27       	eor	r18, r18
     412:	33 27       	eor	r19, r19
     414:	28 1b       	sub	r18, r24
     416:	39 0b       	sbc	r19, r25
     418:	52 2f       	mov	r21, r18
     41a:	43 2f       	mov	r20, r19
     41c:	fb 01       	movw	r30, r22
     41e:	eb 01       	movw	r28, r22
     420:	24 96       	adiw	r28, 0x04	; 4
     422:	28 ee       	ldi	r18, 0xE8	; 232
     424:	33 e0       	ldi	r19, 0x03	; 3
	if(num < 0) num = -num;
	uint16_t res = 1000;
	for(uint8_t i = 0; i < 4; i++){
		*buffer++ = 48 + (num / res);
     426:	85 2f       	mov	r24, r21
     428:	94 2f       	mov	r25, r20
     42a:	b9 01       	movw	r22, r18
     42c:	0e 94 0c 10 	call	0x2018	; 0x2018 <__udivmodhi4>
     430:	60 5d       	subi	r22, 0xD0	; 208
     432:	61 93       	st	Z+, r22
		num = num % res;
     434:	58 2f       	mov	r21, r24
     436:	49 2f       	mov	r20, r25
		res /= 10;
     438:	ad ec       	ldi	r26, 0xCD	; 205
     43a:	bc ec       	ldi	r27, 0xCC	; 204
     43c:	0e 94 26 10 	call	0x204c	; 0x204c <__umulhisi3>
     440:	9c 01       	movw	r18, r24
     442:	36 95       	lsr	r19
     444:	27 95       	ror	r18
     446:	36 95       	lsr	r19
     448:	27 95       	ror	r18
     44a:	36 95       	lsr	r19
     44c:	27 95       	ror	r18

//... without decimal point
void int_to_4digit_nodec(int num, char * buffer){
	if(num < 0) num = -num;
	uint16_t res = 1000;
	for(uint8_t i = 0; i < 4; i++){
     44e:	ec 17       	cp	r30, r28
     450:	fd 07       	cpc	r31, r29
     452:	49 f7       	brne	.-46     	; 0x426 <int_to_4digit_nodec+0x20>
		*buffer++ = 48 + (num / res);
		num = num % res;
		res /= 10;
	}
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
     460:	fc 01       	movw	r30, r24
     462:	70 96       	adiw	r30, 0x10	; 16
     464:	8b e0       	ldi	r24, 0x0B	; 11
     466:	df 01       	movw	r26, r30
     468:	1d 92       	st	X+, r1
     46a:	8a 95       	dec	r24
     46c:	e9 f7       	brne	.-6      	; 0x468 <CDC_Device_ConfigureEndpoints+0xe>
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	8c 83       	std	Y+4, r24	; 0x04
     472:	89 87       	std	Y+9, r24	; 0x09
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	8e 87       	std	Y+14, r24	; 0x0e
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	e2 d4       	rcall	.+2500   	; 0xe44 <Endpoint_ConfigureEndpointTable>
     480:	88 23       	and	r24, r24
     482:	51 f0       	breq	.+20     	; 0x498 <CDC_Device_ConfigureEndpoints+0x3e>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	ce 01       	movw	r24, r28
     488:	06 96       	adiw	r24, 0x06	; 6
     48a:	dc d4       	rcall	.+2488   	; 0xe44 <Endpoint_ConfigureEndpointTable>
     48c:	88 23       	and	r24, r24
     48e:	21 f0       	breq	.+8      	; 0x498 <CDC_Device_ConfigureEndpoints+0x3e>
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	ce 01       	movw	r24, r28
     494:	0b 96       	adiw	r24, 0x0b	; 11
     496:	d6 d4       	rcall	.+2476   	; 0xe44 <Endpoint_ConfigureEndpointTable>
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <CDC_Device_SendByte>:
     49e:	cf 93       	push	r28
     4a0:	fc 01       	movw	r30, r24
     4a2:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <USB_DeviceState>
     4a6:	94 30       	cpi	r25, 0x04	; 4
     4a8:	f9 f4       	brne	.+62     	; 0x4e8 <CDC_Device_SendByte+0x4a>
     4aa:	84 89       	ldd	r24, Z+20	; 0x14
     4ac:	95 89       	ldd	r25, Z+21	; 0x15
     4ae:	a6 89       	ldd	r26, Z+22	; 0x16
     4b0:	b7 89       	ldd	r27, Z+23	; 0x17
     4b2:	89 2b       	or	r24, r25
     4b4:	8a 2b       	or	r24, r26
     4b6:	8b 2b       	or	r24, r27
     4b8:	c9 f0       	breq	.+50     	; 0x4ec <CDC_Device_SendByte+0x4e>
     4ba:	c6 2f       	mov	r28, r22
     4bc:	81 81       	ldd	r24, Z+1	; 0x01
     4be:	b8 d3       	rcall	.+1904   	; 0xc30 <Endpoint_SelectEndpoint>
     4c0:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     4c4:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     4c8:	fc 01       	movw	r30, r24
     4ca:	ef 5b       	subi	r30, 0xBF	; 191
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	20 81       	ld	r18, Z
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	80 81       	ld	r24, Z
     4d4:	28 17       	cp	r18, r24
     4d6:	20 f0       	brcs	.+8      	; 0x4e0 <CDC_Device_SendByte+0x42>
     4d8:	63 d3       	rcall	.+1734   	; 0xba0 <Endpoint_ClearIN>
     4da:	4e d5       	rcall	.+2716   	; 0xf78 <Endpoint_WaitUntilReady>
     4dc:	81 11       	cpse	r24, r1
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <CDC_Device_SendByte+0x50>
     4e0:	8c 2f       	mov	r24, r28
     4e2:	96 d3       	rcall	.+1836   	; 0xc10 <Endpoint_Write_8>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <CDC_Device_SendByte+0x50>
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <CDC_Device_SendByte+0x50>
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <CDC_Device_putchar>:
     4f2:	fb 01       	movw	r30, r22
     4f4:	68 2f       	mov	r22, r24
     4f6:	84 85       	ldd	r24, Z+12	; 0x0c
     4f8:	95 85       	ldd	r25, Z+13	; 0x0d
     4fa:	d1 df       	rcall	.-94     	; 0x49e <CDC_Device_SendByte>
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	81 11       	cpse	r24, r1
     502:	02 c0       	rjmp	.+4      	; 0x508 <CDC_Device_putchar+0x16>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	88 27       	eor	r24, r24
     50a:	99 27       	eor	r25, r25
     50c:	82 1b       	sub	r24, r18
     50e:	93 0b       	sbc	r25, r19
     510:	08 95       	ret

00000512 <CDC_Device_Flush>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	fc 01       	movw	r30, r24
     518:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <USB_DeviceState>
     51c:	94 30       	cpi	r25, 0x04	; 4
     51e:	d1 f5       	brne	.+116    	; 0x594 <CDC_Device_Flush+0x82>
     520:	84 89       	ldd	r24, Z+20	; 0x14
     522:	95 89       	ldd	r25, Z+21	; 0x15
     524:	a6 89       	ldd	r26, Z+22	; 0x16
     526:	b7 89       	ldd	r27, Z+23	; 0x17
     528:	89 2b       	or	r24, r25
     52a:	8a 2b       	or	r24, r26
     52c:	8b 2b       	or	r24, r27
     52e:	a1 f1       	breq	.+104    	; 0x598 <CDC_Device_Flush+0x86>
     530:	81 81       	ldd	r24, Z+1	; 0x01
     532:	7e d3       	rcall	.+1788   	; 0xc30 <Endpoint_SelectEndpoint>
     534:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     538:	88 23       	and	r24, r24
     53a:	4c f4       	brge	.+18     	; 0x54e <CDC_Device_Flush+0x3c>
     53c:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     540:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     544:	ef 5b       	subi	r30, 0xBF	; 191
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	80 81       	ld	r24, Z
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0d c0       	rjmp	.+26     	; 0x568 <CDC_Device_Flush+0x56>
     54e:	20 91 30 22 	lds	r18, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     552:	30 91 31 22 	lds	r19, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     556:	f9 01       	movw	r30, r18
     558:	e0 5c       	subi	r30, 0xC0	; 192
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	80 81       	ld	r24, Z
     55e:	31 96       	adiw	r30, 0x01	; 1
     560:	20 81       	ld	r18, Z
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	82 1b       	sub	r24, r18
     566:	91 09       	sbc	r25, r1
     568:	89 2b       	or	r24, r25
     56a:	c1 f0       	breq	.+48     	; 0x59c <CDC_Device_Flush+0x8a>
     56c:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     570:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     574:	fc 01       	movw	r30, r24
     576:	ef 5b       	subi	r30, 0xBF	; 191
     578:	ff 4f       	sbci	r31, 0xFF	; 255
     57a:	d0 81       	ld	r29, Z
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	c0 81       	ld	r28, Z
     580:	0f d3       	rcall	.+1566   	; 0xba0 <Endpoint_ClearIN>
     582:	dc 17       	cp	r29, r28
     584:	68 f0       	brcs	.+26     	; 0x5a0 <CDC_Device_Flush+0x8e>
     586:	f8 d4       	rcall	.+2544   	; 0xf78 <Endpoint_WaitUntilReady>
     588:	c8 2f       	mov	r28, r24
     58a:	81 11       	cpse	r24, r1
     58c:	0b c0       	rjmp	.+22     	; 0x5a4 <CDC_Device_Flush+0x92>
     58e:	08 d3       	rcall	.+1552   	; 0xba0 <Endpoint_ClearIN>
     590:	8c 2f       	mov	r24, r28
     592:	08 c0       	rjmp	.+16     	; 0x5a4 <CDC_Device_Flush+0x92>
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <CDC_Device_Flush+0x92>
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <CDC_Device_Flush+0x92>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <CDC_Device_Flush+0x92>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <CDC_Device_Flush+0x92>
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <CDC_Device_USBTask>:
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	fc 01       	movw	r30, r24
     5b0:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <USB_DeviceState>
     5b4:	94 30       	cpi	r25, 0x04	; 4
     5b6:	81 f4       	brne	.+32     	; 0x5d8 <CDC_Device_USBTask+0x2e>
     5b8:	84 89       	ldd	r24, Z+20	; 0x14
     5ba:	95 89       	ldd	r25, Z+21	; 0x15
     5bc:	a6 89       	ldd	r26, Z+22	; 0x16
     5be:	b7 89       	ldd	r27, Z+23	; 0x17
     5c0:	89 2b       	or	r24, r25
     5c2:	8a 2b       	or	r24, r26
     5c4:	8b 2b       	or	r24, r27
     5c6:	41 f0       	breq	.+16     	; 0x5d8 <CDC_Device_USBTask+0x2e>
     5c8:	ef 01       	movw	r28, r30
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
     5cc:	31 d3       	rcall	.+1634   	; 0xc30 <Endpoint_SelectEndpoint>
     5ce:	70 d3       	rcall	.+1760   	; 0xcb0 <Endpoint_IsINReady>
     5d0:	88 23       	and	r24, r24
     5d2:	11 f0       	breq	.+4      	; 0x5d8 <CDC_Device_USBTask+0x2e>
     5d4:	ce 01       	movw	r24, r28
     5d6:	9d df       	rcall	.-198    	; 0x512 <CDC_Device_Flush>
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <CDC_Device_ReceiveByte>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	20 91 27 22 	lds	r18, 0x2227	; 0x802227 <USB_DeviceState>
     5e6:	24 30       	cpi	r18, 0x04	; 4
     5e8:	09 f0       	breq	.+2      	; 0x5ec <CDC_Device_ReceiveByte+0xe>
     5ea:	52 c0       	rjmp	.+164    	; 0x690 <CDC_Device_ReceiveByte+0xb2>
     5ec:	fc 01       	movw	r30, r24
     5ee:	44 89       	ldd	r20, Z+20	; 0x14
     5f0:	55 89       	ldd	r21, Z+21	; 0x15
     5f2:	66 89       	ldd	r22, Z+22	; 0x16
     5f4:	77 89       	ldd	r23, Z+23	; 0x17
     5f6:	45 2b       	or	r20, r21
     5f8:	46 2b       	or	r20, r22
     5fa:	47 2b       	or	r20, r23
     5fc:	09 f4       	brne	.+2      	; 0x600 <CDC_Device_ReceiveByte+0x22>
     5fe:	4b c0       	rjmp	.+150    	; 0x696 <CDC_Device_ReceiveByte+0xb8>
     600:	86 81       	ldd	r24, Z+6	; 0x06
     602:	16 d3       	rcall	.+1580   	; 0xc30 <Endpoint_SelectEndpoint>
     604:	61 d3       	rcall	.+1730   	; 0xcc8 <Endpoint_IsOUTReceived>
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <CDC_Device_ReceiveByte+0x2e>
     60a:	48 c0       	rjmp	.+144    	; 0x69c <CDC_Device_ReceiveByte+0xbe>
     60c:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     610:	88 23       	and	r24, r24
     612:	4c f4       	brge	.+18     	; 0x626 <CDC_Device_ReceiveByte+0x48>
     614:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     618:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     61c:	ef 5b       	subi	r30, 0xBF	; 191
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	80 81       	ld	r24, Z
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0d c0       	rjmp	.+26     	; 0x640 <CDC_Device_ReceiveByte+0x62>
     626:	20 91 30 22 	lds	r18, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     62a:	30 91 31 22 	lds	r19, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     62e:	f9 01       	movw	r30, r18
     630:	e0 5c       	subi	r30, 0xC0	; 192
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	80 81       	ld	r24, Z
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	20 81       	ld	r18, Z
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	82 1b       	sub	r24, r18
     63e:	91 09       	sbc	r25, r1
     640:	89 2b       	or	r24, r25
     642:	21 f0       	breq	.+8      	; 0x64c <CDC_Device_ReceiveByte+0x6e>
     644:	d5 d2       	rcall	.+1450   	; 0xbf0 <Endpoint_Read_8>
     646:	c8 2f       	mov	r28, r24
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	02 c0       	rjmp	.+4      	; 0x650 <CDC_Device_ReceiveByte+0x72>
     64c:	cf ef       	ldi	r28, 0xFF	; 255
     64e:	df ef       	ldi	r29, 0xFF	; 255
     650:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     654:	88 23       	and	r24, r24
     656:	4c f4       	brge	.+18     	; 0x66a <CDC_Device_ReceiveByte+0x8c>
     658:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     65c:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     660:	ef 5b       	subi	r30, 0xBF	; 191
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	20 81       	ld	r18, Z
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	0d c0       	rjmp	.+26     	; 0x684 <CDC_Device_ReceiveByte+0xa6>
     66a:	40 91 30 22 	lds	r20, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     66e:	50 91 31 22 	lds	r21, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     672:	fa 01       	movw	r30, r20
     674:	e0 5c       	subi	r30, 0xC0	; 192
     676:	ff 4f       	sbci	r31, 0xFF	; 255
     678:	20 81       	ld	r18, Z
     67a:	31 96       	adiw	r30, 0x01	; 1
     67c:	80 81       	ld	r24, Z
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	28 1b       	sub	r18, r24
     682:	31 09       	sbc	r19, r1
     684:	23 2b       	or	r18, r19
     686:	69 f4       	brne	.+26     	; 0x6a2 <CDC_Device_ReceiveByte+0xc4>
     688:	a4 d2       	rcall	.+1352   	; 0xbd2 <Endpoint_ClearOUT>
     68a:	8c 2f       	mov	r24, r28
     68c:	9d 2f       	mov	r25, r29
     68e:	0b c0       	rjmp	.+22     	; 0x6a6 <CDC_Device_ReceiveByte+0xc8>
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	9f ef       	ldi	r25, 0xFF	; 255
     694:	08 c0       	rjmp	.+16     	; 0x6a6 <CDC_Device_ReceiveByte+0xc8>
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	9f ef       	ldi	r25, 0xFF	; 255
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <CDC_Device_ReceiveByte+0xc8>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	9f ef       	ldi	r25, 0xFF	; 255
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <CDC_Device_ReceiveByte+0xc8>
     6a2:	8c 2f       	mov	r24, r28
     6a4:	9d 2f       	mov	r25, r29
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <CDC_Device_getchar>:
     6ac:	fc 01       	movw	r30, r24
     6ae:	84 85       	ldd	r24, Z+12	; 0x0c
     6b0:	95 85       	ldd	r25, Z+13	; 0x0d
     6b2:	95 df       	rcall	.-214    	; 0x5de <CDC_Device_ReceiveByte>
     6b4:	99 23       	and	r25, r25
     6b6:	14 f4       	brge	.+4      	; 0x6bc <CDC_Device_getchar+0x10>
     6b8:	8e ef       	ldi	r24, 0xFE	; 254
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
     6bc:	08 95       	ret

000006be <CDC_Device_CreateStream>:
     6be:	fb 01       	movw	r30, r22
     6c0:	2e e0       	ldi	r18, 0x0E	; 14
     6c2:	db 01       	movw	r26, r22
     6c4:	1d 92       	st	X+, r1
     6c6:	2a 95       	dec	r18
     6c8:	e9 f7       	brne	.-6      	; 0x6c4 <CDC_Device_CreateStream+0x6>
     6ca:	23 e0       	ldi	r18, 0x03	; 3
     6cc:	23 83       	std	Z+3, r18	; 0x03
     6ce:	29 e7       	ldi	r18, 0x79	; 121
     6d0:	32 e0       	ldi	r19, 0x02	; 2
     6d2:	20 87       	std	Z+8, r18	; 0x08
     6d4:	31 87       	std	Z+9, r19	; 0x09
     6d6:	26 e5       	ldi	r18, 0x56	; 86
     6d8:	33 e0       	ldi	r19, 0x03	; 3
     6da:	22 87       	std	Z+10, r18	; 0x0a
     6dc:	33 87       	std	Z+11, r19	; 0x0b
     6de:	84 87       	std	Z+12, r24	; 0x0c
     6e0:	95 87       	std	Z+13, r25	; 0x0d
     6e2:	08 95       	ret

000006e4 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     6e4:	08 95       	ret

000006e6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
     6f2:	03 d3       	rcall	.+1542   	; 0xcfa <Endpoint_IsSETUPReceived>
     6f4:	88 23       	and	r24, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <CDC_Device_ProcessControlRequest+0x14>
     6f8:	7e c0       	rjmp	.+252    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     6fa:	88 81       	ld	r24, Y
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	20 91 2c 22 	lds	r18, 0x222C	; 0x80222c <USB_ControlRequest+0x4>
     702:	30 91 2d 22 	lds	r19, 0x222D	; 0x80222d <USB_ControlRequest+0x5>
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	09 f0       	breq	.+2      	; 0x70e <CDC_Device_ProcessControlRequest+0x28>
     70c:	74 c0       	rjmp	.+232    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
	  return;

	switch (USB_ControlRequest.bRequest)
     70e:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <USB_ControlRequest+0x1>
     712:	81 32       	cpi	r24, 0x21	; 33
     714:	59 f0       	breq	.+22     	; 0x72c <CDC_Device_ProcessControlRequest+0x46>
     716:	18 f4       	brcc	.+6      	; 0x71e <CDC_Device_ProcessControlRequest+0x38>
     718:	80 32       	cpi	r24, 0x20	; 32
     71a:	29 f1       	breq	.+74     	; 0x766 <CDC_Device_ProcessControlRequest+0x80>
     71c:	6c c0       	rjmp	.+216    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
     71e:	82 32       	cpi	r24, 0x22	; 34
     720:	09 f4       	brne	.+2      	; 0x724 <CDC_Device_ProcessControlRequest+0x3e>
     722:	50 c0       	rjmp	.+160    	; 0x7c4 <CDC_Device_ProcessControlRequest+0xde>
     724:	83 32       	cpi	r24, 0x23	; 35
     726:	09 f4       	brne	.+2      	; 0x72a <CDC_Device_ProcessControlRequest+0x44>
     728:	5c c0       	rjmp	.+184    	; 0x7e2 <CDC_Device_ProcessControlRequest+0xfc>
     72a:	65 c0       	rjmp	.+202    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     72c:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <USB_ControlRequest>
     730:	81 3a       	cpi	r24, 0xA1	; 161
     732:	09 f0       	breq	.+2      	; 0x736 <CDC_Device_ProcessControlRequest+0x50>
			{
				Endpoint_ClearSETUP();
     734:	60 c0       	rjmp	.+192    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>

				while (!(Endpoint_IsINReady()));
     736:	fa d2       	rcall	.+1524   	; 0xd2c <Endpoint_ClearSETUP>
     738:	bb d2       	rcall	.+1398   	; 0xcb0 <Endpoint_IsINReady>
     73a:	88 23       	and	r24, r24
     73c:	e9 f3       	breq	.-6      	; 0x738 <CDC_Device_ProcessControlRequest+0x52>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     73e:	8c 89       	ldd	r24, Y+20	; 0x14
     740:	fd 88       	ldd	r15, Y+21	; 0x15
     742:	0e 89       	ldd	r16, Y+22	; 0x16
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
     744:	1f 89       	ldd	r17, Y+23	; 0x17
				Endpoint_Write_8(Data >> 8);
     746:	64 d2       	rcall	.+1224   	; 0xc10 <Endpoint_Write_8>
     748:	8f 2d       	mov	r24, r15
				Endpoint_Write_8(Data >> 16);
     74a:	62 d2       	rcall	.+1220   	; 0xc10 <Endpoint_Write_8>
     74c:	80 2f       	mov	r24, r16
				Endpoint_Write_8(Data >> 24);
     74e:	60 d2       	rcall	.+1216   	; 0xc10 <Endpoint_Write_8>
     750:	81 2f       	mov	r24, r17
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     752:	5e d2       	rcall	.+1212   	; 0xc10 <Endpoint_Write_8>
     754:	88 8d       	ldd	r24, Y+24	; 0x18
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     756:	5c d2       	rcall	.+1208   	; 0xc10 <Endpoint_Write_8>
     758:	89 8d       	ldd	r24, Y+25	; 0x19
     75a:	5a d2       	rcall	.+1204   	; 0xc10 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     75c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     75e:	58 d2       	rcall	.+1200   	; 0xc10 <Endpoint_Write_8>

				Endpoint_ClearIN();
     760:	1f d2       	rcall	.+1086   	; 0xba0 <Endpoint_ClearIN>
     762:	f3 d3       	rcall	.+2022   	; 0xf4a <Endpoint_ClearStatusStage>
				Endpoint_ClearStatusStage();
     764:	48 c0       	rjmp	.+144    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
     766:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <USB_ControlRequest>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     76a:	81 32       	cpi	r24, 0x21	; 33
     76c:	09 f0       	breq	.+2      	; 0x770 <CDC_Device_ProcessControlRequest+0x8a>
     76e:	43 c0       	rjmp	.+134    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
     770:	dd d2       	rcall	.+1466   	; 0xd2c <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     772:	05 c0       	rjmp	.+10     	; 0x77e <CDC_Device_ProcessControlRequest+0x98>
     774:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>
     778:	88 23       	and	r24, r24
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     77a:	09 f4       	brne	.+2      	; 0x77e <CDC_Device_ProcessControlRequest+0x98>
     77c:	3c c0       	rjmp	.+120    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
     77e:	a4 d2       	rcall	.+1352   	; 0xcc8 <Endpoint_IsOUTReceived>
     780:	88 23       	and	r24, r24
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
     782:	c1 f3       	breq	.-16     	; 0x774 <CDC_Device_ProcessControlRequest+0x8e>
     784:	35 d2       	rcall	.+1130   	; 0xbf0 <Endpoint_Read_8>
     786:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
     788:	33 d2       	rcall	.+1126   	; 0xbf0 <Endpoint_Read_8>
     78a:	18 2f       	mov	r17, r24
     78c:	31 d2       	rcall	.+1122   	; 0xbf0 <Endpoint_Read_8>
				uint32_t Byte2 = Endpoint_Read_8();
     78e:	08 2f       	mov	r16, r24
     790:	2f d2       	rcall	.+1118   	; 0xbf0 <Endpoint_Read_8>
				uint32_t Byte3 = Endpoint_Read_8();
     792:	40 2f       	mov	r20, r16
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	ba 01       	movw	r22, r20
     79c:	55 27       	eor	r21, r21
     79e:	44 27       	eor	r20, r20
     7a0:	78 2b       	or	r23, r24
     7a2:	4f 29       	or	r20, r15
     7a4:	51 2b       	or	r21, r17
     7a6:	4c 8b       	std	Y+20, r20	; 0x14
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     7a8:	5d 8b       	std	Y+21, r21	; 0x15
     7aa:	6e 8b       	std	Y+22, r22	; 0x16
     7ac:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     7ae:	20 d2       	rcall	.+1088   	; 0xbf0 <Endpoint_Read_8>
     7b0:	88 8f       	std	Y+24, r24	; 0x18
     7b2:	1e d2       	rcall	.+1084   	; 0xbf0 <Endpoint_Read_8>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     7b4:	89 8f       	std	Y+25, r24	; 0x19
     7b6:	1c d2       	rcall	.+1080   	; 0xbf0 <Endpoint_Read_8>

				Endpoint_ClearOUT();
     7b8:	8a 8f       	std	Y+26, r24	; 0x1a
     7ba:	0b d2       	rcall	.+1046   	; 0xbd2 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
     7bc:	c6 d3       	rcall	.+1932   	; 0xf4a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     7be:	ce 01       	movw	r24, r28
     7c0:	91 df       	rcall	.-222    	; 0x6e4 <CDC_Device_Event_Stub>
     7c2:	19 c0       	rjmp	.+50     	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7c4:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <USB_ControlRequest>
     7c8:	81 32       	cpi	r24, 0x21	; 33
			{
				Endpoint_ClearSETUP();
     7ca:	a9 f4       	brne	.+42     	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
     7cc:	af d2       	rcall	.+1374   	; 0xd2c <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
     7ce:	bd d3       	rcall	.+1914   	; 0xf4a <Endpoint_ClearStatusStage>
     7d0:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <USB_ControlRequest+0x2>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     7d4:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <USB_ControlRequest+0x3>
     7d8:	88 8b       	std	Y+16, r24	; 0x10
     7da:	99 8b       	std	Y+17, r25	; 0x11
     7dc:	ce 01       	movw	r24, r28

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     7de:	82 df       	rcall	.-252    	; 0x6e4 <CDC_Device_Event_Stub>
     7e0:	0a c0       	rjmp	.+20     	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
     7e2:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <USB_ControlRequest>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7e6:	81 32       	cpi	r24, 0x21	; 33
     7e8:	31 f4       	brne	.+12     	; 0x7f6 <CDC_Device_ProcessControlRequest+0x110>
     7ea:	a0 d2       	rcall	.+1344   	; 0xd2c <Endpoint_ClearSETUP>
     7ec:	ae d3       	rcall	.+1884   	; 0xf4a <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
     7ee:	60 91 2a 22 	lds	r22, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
				Endpoint_ClearStatusStage();
     7f2:	ce 01       	movw	r24, r28
     7f4:	77 df       	rcall	.-274    	; 0x6e4 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
			}

			break;
	}
}
     800:	08 95       	ret

00000802 <USB_Device_ProcessControlRequest>:
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	ea 97       	sbiw	r28, 0x3a	; 58
     814:	cd bf       	out	0x3d, r28	; 61
     816:	de bf       	out	0x3e, r29	; 62
     818:	08 e2       	ldi	r16, 0x28	; 40
     81a:	12 e2       	ldi	r17, 0x22	; 34
     81c:	0f 2e       	mov	r0, r31
     81e:	f0 e3       	ldi	r31, 0x30	; 48
     820:	ef 2e       	mov	r14, r31
     822:	f2 e2       	ldi	r31, 0x22	; 34
     824:	ff 2e       	mov	r15, r31
     826:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     828:	e3 d1       	rcall	.+966    	; 0xbf0 <Endpoint_Read_8>
     82a:	f8 01       	movw	r30, r16
     82c:	81 93       	st	Z+, r24
     82e:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     830:	ee 16       	cp	r14, r30
     832:	ff 06       	cpc	r15, r31
     834:	c9 f7       	brne	.-14     	; 0x828 <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     836:	0e 94 ad 0c 	call	0x195a	; 0x195a <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
     83a:	5f d2       	rcall	.+1214   	; 0xcfa <Endpoint_IsSETUPReceived>
     83c:	88 23       	and	r24, r24
     83e:	09 f4       	brne	.+2      	; 0x842 <USB_Device_ProcessControlRequest+0x40>
     840:	fb c0       	rjmp	.+502    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     842:	e8 e2       	ldi	r30, 0x28	; 40
     844:	f2 e2       	ldi	r31, 0x22	; 34
     846:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
     848:	31 81       	ldd	r19, Z+1	; 0x01
     84a:	83 2f       	mov	r24, r19
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	8a 30       	cpi	r24, 0x0A	; 10
     850:	91 05       	cpc	r25, r1
     852:	08 f0       	brcs	.+2      	; 0x856 <USB_Device_ProcessControlRequest+0x54>
     854:	f1 c0       	rjmp	.+482    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     856:	fc 01       	movw	r30, r24
     858:	e2 50       	subi	r30, 0x02	; 2
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     860:	20 38       	cpi	r18, 0x80	; 128
     862:	21 f0       	breq	.+8      	; 0x86c <USB_Device_ProcessControlRequest+0x6a>
     864:	22 38       	cpi	r18, 0x82	; 130
     866:	09 f0       	breq	.+2      	; 0x86a <USB_Device_ProcessControlRequest+0x68>
     868:	e7 c0       	rjmp	.+462    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     86a:	08 c0       	rjmp	.+16     	; 0x87c <USB_Device_ProcessControlRequest+0x7a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     86c:	10 91 24 22 	lds	r17, 0x2224	; 0x802224 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     870:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <USB_Device_RemoteWakeupEnabled>
     874:	88 23       	and	r24, r24
     876:	81 f0       	breq	.+32     	; 0x898 <USB_Device_ProcessControlRequest+0x96>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     878:	12 60       	ori	r17, 0x02	; 2
     87a:	0e c0       	rjmp	.+28     	; 0x898 <USB_Device_ProcessControlRequest+0x96>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     87c:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <USB_ControlRequest+0x4>
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	d6 d1       	rcall	.+940    	; 0xc30 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
     884:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     888:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     88c:	11 81       	ldd	r17, Z+1	; 0x01

			CurrentStatus = Endpoint_IsStalled();
     88e:	12 fb       	bst	r17, 2
     890:	11 27       	eor	r17, r17

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     892:	10 f9       	bld	r17, 0
     894:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
     896:	cc d1       	rcall	.+920    	; 0xc30 <Endpoint_SelectEndpoint>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
     898:	49 d2       	rcall	.+1170   	; 0xd2c <Endpoint_ClearSETUP>
     89a:	81 2f       	mov	r24, r17
				Endpoint_Write_8(Data >> 8);
     89c:	b9 d1       	rcall	.+882    	; 0xc10 <Endpoint_Write_8>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	b7 d1       	rcall	.+878    	; 0xc10 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
     8a2:	7e d1       	rcall	.+764    	; 0xba0 <Endpoint_ClearIN>
     8a4:	52 d3       	rcall	.+1700   	; 0xf4a <Endpoint_ClearStatusStage>

	Endpoint_ClearStatusStage();
     8a6:	c8 c0       	rjmp	.+400    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     8a8:	22 23       	and	r18, r18
     8aa:	09 f4       	brne	.+2      	; 0x8ae <USB_Device_ProcessControlRequest+0xac>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     8ac:	cb c0       	rjmp	.+406    	; 0xa44 <USB_Device_ProcessControlRequest+0x242>
     8ae:	22 30       	cpi	r18, 0x02	; 2
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <USB_Device_ProcessControlRequest+0xb2>
     8b2:	c2 c0       	rjmp	.+388    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     8b4:	cc c0       	rjmp	.+408    	; 0xa4e <USB_Device_ProcessControlRequest+0x24c>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	33 30       	cpi	r19, 0x03	; 3
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     8ba:	09 f0       	breq	.+2      	; 0x8be <USB_Device_ProcessControlRequest+0xbc>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	80 93 25 22 	sts	0x2225, r24	; 0x802225 <USB_Device_RemoteWakeupEnabled>
     8c2:	23 c0       	rjmp	.+70     	; 0x90a <USB_Device_ProcessControlRequest+0x108>
     8c4:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <USB_ControlRequest+0x4>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     8c8:	1e 2f       	mov	r17, r30
     8ca:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <USB_Device_ProcessControlRequest+0xce>
     8ce:	b4 c0       	rjmp	.+360    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
     8d0:	81 2f       	mov	r24, r17
     8d2:	ae d1       	rcall	.+860    	; 0xc30 <Endpoint_SelectEndpoint>
     8d4:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <USB_ControlRequest+0x1>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	11 f4       	brne	.+4      	; 0x8e0 <USB_Device_ProcessControlRequest+0xde>
     8dc:	53 d2       	rcall	.+1190   	; 0xd84 <Endpoint_StallTransaction>
					{
						Endpoint_StallTransaction();
     8de:	15 c0       	rjmp	.+42     	; 0x90a <USB_Device_ProcessControlRequest+0x108>
     8e0:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
     8e4:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	8b 7f       	andi	r24, 0xFB	; 251
     8ec:	81 83       	std	Z+1, r24	; 0x01
     8ee:	24 e8       	ldi	r18, 0x84	; 132
     8f0:	12 9f       	mul	r17, r18
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
     8f2:	f0 01       	movw	r30, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	ea 58       	subi	r30, 0x8A	; 138
     8f8:	fd 4d       	sbci	r31, 0xDD	; 221
     8fa:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
     8fc:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     900:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     904:	80 81       	ld	r24, Z
     906:	8e 7f       	andi	r24, 0xFE	; 254
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     908:	80 83       	st	Z, r24

	Endpoint_ClearSETUP();
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	91 d1       	rcall	.+802    	; 0xc30 <Endpoint_SelectEndpoint>

	Endpoint_ClearStatusStage();
     90e:	0e d2       	rcall	.+1052   	; 0xd2c <Endpoint_ClearSETUP>
     910:	1c d3       	rcall	.+1592   	; 0xf4a <Endpoint_ClearStatusStage>
     912:	92 c0       	rjmp	.+292    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     914:	21 11       	cpse	r18, r1
     916:	90 c0       	rjmp	.+288    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     918:	10 91 2a 22 	lds	r17, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
     91c:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
     91e:	06 d2       	rcall	.+1036   	; 0xd2c <Endpoint_ClearSETUP>
     920:	14 d3       	rcall	.+1576   	; 0xf4a <Endpoint_ClearStatusStage>

	Endpoint_ClearStatusStage();
     922:	c6 d1       	rcall	.+908    	; 0xcb0 <Endpoint_IsINReady>
     924:	88 23       	and	r24, r24

	while (!(Endpoint_IsINReady()));
     926:	e9 f3       	breq	.-6      	; 0x922 <USB_Device_ProcessControlRequest+0x120>
     928:	10 93 c3 04 	sts	0x04C3, r17	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
     92c:	11 11       	cpse	r17, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
     92e:	02 c0       	rjmp	.+4      	; 0x934 <USB_Device_ProcessControlRequest+0x132>
     930:	82 e0       	ldi	r24, 0x02	; 2

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     932:	01 c0       	rjmp	.+2      	; 0x936 <USB_Device_ProcessControlRequest+0x134>
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <USB_DeviceState>
     93a:	7e c0       	rjmp	.+252    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     93c:	20 58       	subi	r18, 0x80	; 128
     93e:	22 30       	cpi	r18, 0x02	; 2
     940:	08 f0       	brcs	.+2      	; 0x944 <USB_Device_ProcessControlRequest+0x142>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     942:	7a c0       	rjmp	.+244    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     944:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
     948:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <USB_ControlRequest+0x3>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     94c:	8c 3d       	cpi	r24, 0xDC	; 220
     94e:	e3 e0       	ldi	r30, 0x03	; 3
     950:	9e 07       	cpc	r25, r30
     952:	09 f0       	breq	.+2      	; 0x956 <USB_Device_ProcessControlRequest+0x154>
     954:	37 c0       	rjmp	.+110    	; 0x9c4 <USB_Device_ProcessControlRequest+0x1c2>
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	8a 83       	std	Y+2, r24	; 0x02
     95a:	8a e3       	ldi	r24, 0x3A	; 58
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	0f b7       	in	r16, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     960:	f8 94       	cli
     962:	ae 01       	movw	r20, r28
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     964:	4d 5f       	subi	r20, 0xFD	; 253
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
     966:	5f 4f       	sbci	r21, 0xFF	; 255
				#endif

				GCC_MEMORY_BARRIER();
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	78 e0       	ldi	r23, 0x08	; 8
     96c:	20 ec       	ldi	r18, 0xC0	; 192
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     96e:	31 e0       	ldi	r19, 0x01	; 1
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     970:	12 e0       	ldi	r17, 0x02	; 2

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
     972:	f9 01       	movw	r30, r18
     974:	12 87       	std	Z+10, r17	; 0x0a
     976:	87 2f       	mov	r24, r23
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e0       	ldi	r26, 0x00	; 0
					SerialByte = pgm_read_byte_far(SigReadAddress);
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	ab bf       	out	0x3b, r26	; 59
     980:	fc 01       	movw	r30, r24
     982:	97 91       	elpm	r25, Z+
     984:	89 2f       	mov	r24, r25
     986:	f9 01       	movw	r30, r18
     988:	12 86       	std	Z+10, r1	; 0x0a
     98a:	60 ff       	sbrs	r22, 0
					NVM.CMD    = 0;
     98c:	03 c0       	rjmp	.+6      	; 0x994 <USB_Device_ProcessControlRequest+0x192>
     98e:	82 95       	swap	r24

					if (SerialCharNum & 0x01)
     990:	8f 70       	andi	r24, 0x0F	; 15
     992:	7f 5f       	subi	r23, 0xFF	; 255
					{
						SerialByte >>= 4;
     994:	8f 70       	andi	r24, 0x0F	; 15
     996:	8a 30       	cpi	r24, 0x0A	; 10
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
     998:	18 f0       	brcs	.+6      	; 0x9a0 <USB_Device_ProcessControlRequest+0x19e>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	c7 96       	adiw	r24, 0x37	; 55
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <USB_Device_ProcessControlRequest+0x1a2>
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	c0 96       	adiw	r24, 0x30	; 48
     9a4:	fa 01       	movw	r30, r20
     9a6:	81 93       	st	Z+, r24
     9a8:	91 93       	st	Z+, r25
     9aa:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	6c 31       	cpi	r22, 0x1C	; 28
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
     9b0:	01 f7       	brne	.-64     	; 0x972 <USB_Device_ProcessControlRequest+0x170>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
     9b2:	0f bf       	out	0x3f, r16	; 63

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     9b4:	bb d1       	rcall	.+886    	; 0xd2c <Endpoint_ClearSETUP>
     9b6:	6a e3       	ldi	r22, 0x3A	; 58
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	ce 01       	movw	r24, r28
	Endpoint_ClearOUT();
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	68 d0       	rcall	.+208    	; 0xa90 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     9c0:	08 d1       	rcall	.+528    	; 0xbd2 <Endpoint_ClearOUT>
     9c2:	3a c0       	rjmp	.+116    	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     9c4:	ae 01       	movw	r20, r28
     9c6:	4f 5f       	subi	r20, 0xFF	; 255
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	60 91 2c 22 	lds	r22, 0x222C	; 0x80222c <USB_ControlRequest+0x4>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
     9ce:	3e dc       	rcall	.-1924   	; 0x24c <CALLBACK_USB_GetDescriptor>
     9d0:	8c 01       	movw	r16, r24

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
     9d2:	89 2b       	or	r24, r25
     9d4:	89 f1       	breq	.+98     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     9d6:	aa d1       	rcall	.+852    	; 0xd2c <Endpoint_ClearSETUP>
     9d8:	b8 01       	movw	r22, r16
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     9de:	58 d0       	rcall	.+176    	; 0xa90 <Endpoint_Write_Control_Stream_LE>
     9e0:	f8 d0       	rcall	.+496    	; 0xbd2 <Endpoint_ClearOUT>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     9e2:	2a c0       	rjmp	.+84     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     9e4:	20 38       	cpi	r18, 0x80	; 128

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     9e6:	41 f5       	brne	.+80     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     9e8:	a1 d1       	rcall	.+834    	; 0xd2c <Endpoint_ClearSETUP>
     9ea:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <USB_Device_ConfigurationNumber>
	Endpoint_ClearIN();
     9ee:	10 d1       	rcall	.+544    	; 0xc10 <Endpoint_Write_8>
     9f0:	d7 d0       	rcall	.+430    	; 0xba0 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
     9f2:	ab d2       	rcall	.+1366   	; 0xf4a <Endpoint_ClearStatusStage>
     9f4:	21 c0       	rjmp	.+66     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     9f6:	21 11       	cpse	r18, r1
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     9f8:	1f c0       	rjmp	.+62     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
     9fa:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     9fe:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <USB_ControlRequest+0x3>
     a02:	99 27       	eor	r25, r25
     a04:	02 97       	sbiw	r24, 0x02	; 2
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
     a06:	c4 f4       	brge	.+48     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     a08:	91 d1       	rcall	.+802    	; 0xd2c <Endpoint_ClearSETUP>
     a0a:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
     a0e:	80 93 23 22 	sts	0x2223, r24	; 0x802223 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     a12:	9b d2       	rcall	.+1334   	; 0xf4a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     a14:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <USB_Device_ConfigurationNumber>
     a18:	88 23       	and	r24, r24
     a1a:	21 f0       	breq	.+8      	; 0xa24 <USB_Device_ProcessControlRequest+0x222>
	  USB_DeviceState = DEVICE_STATE_Configured;
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <USB_DeviceState>
     a22:	09 c0       	rjmp	.+18     	; 0xa36 <USB_Device_ProcessControlRequest+0x234>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
     a24:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a28:	81 11       	cpse	r24, r1
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <USB_Device_ProcessControlRequest+0x22e>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <USB_Device_ProcessControlRequest+0x230>
     a30:	84 e0       	ldi	r24, 0x04	; 4
     a32:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     a36:	87 d7       	rcall	.+3854   	; 0x1946 <EVENT_USB_Device_ConfigurationChanged>
     a38:	60 d1       	rcall	.+704    	; 0xcfa <Endpoint_IsSETUPReceived>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     a3a:	88 23       	and	r24, r24
     a3c:	71 f0       	breq	.+28     	; 0xa5a <USB_Device_ProcessControlRequest+0x258>
     a3e:	76 d1       	rcall	.+748    	; 0xd2c <Endpoint_ClearSETUP>
     a40:	a1 d1       	rcall	.+834    	; 0xd84 <Endpoint_StallTransaction>
	{
		Endpoint_ClearSETUP();
     a42:	0b c0       	rjmp	.+22     	; 0xa5a <USB_Device_ProcessControlRequest+0x258>
     a44:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
		Endpoint_StallTransaction();
     a48:	81 30       	cpi	r24, 0x01	; 1
	}
}
     a4a:	b1 f7       	brne	.-20     	; 0xa38 <USB_Device_ProcessControlRequest+0x236>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a4c:	34 cf       	rjmp	.-408    	; 0x8b6 <USB_Device_ProcessControlRequest+0xb4>
     a4e:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <USB_ControlRequest+0x2>
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <USB_Device_ProcessControlRequest+0x256>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a56:	36 cf       	rjmp	.-404    	; 0x8c4 <USB_Device_ProcessControlRequest+0xc2>
     a58:	58 cf       	rjmp	.-336    	; 0x90a <USB_Device_ProcessControlRequest+0x108>
     a5a:	ea 96       	adiw	r28, 0x3a	; 58
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	df 91       	pop	r29
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     a6e:	08 95       	ret

00000a70 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     a70:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     a72:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>
     a76:	88 23       	and	r24, r24
     a78:	49 f0       	breq	.+18     	; 0xa8c <USB_USBTask+0x1c>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
     a7a:	c0 91 34 22 	lds	r28, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	d7 d0       	rcall	.+430    	; 0xc30 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
     a82:	3b d1       	rcall	.+630    	; 0xcfa <Endpoint_IsSETUPReceived>
     a84:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
     a86:	bd de       	rcall	.-646    	; 0x802 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
     a88:	8c 2f       	mov	r24, r28
     a8a:	d2 d0       	rcall	.+420    	; 0xc30 <Endpoint_SelectEndpoint>
     a8c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     a8e:	08 95       	ret

00000a90 <Endpoint_Write_Control_Stream_LE>:
     a90:	cf 92       	push	r12

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	c8 2e       	mov	r12, r24
     aa2:	d9 2e       	mov	r13, r25
     aa4:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     aa6:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     aaa:	80 68       	ori	r24, 0x80	; 128
     aac:	c1 d0       	rcall	.+386    	; 0xc30 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
     aae:	c0 91 2e 22 	lds	r28, 0x222E	; 0x80222e <USB_ControlRequest+0x6>
     ab2:	d0 91 2f 22 	lds	r29, 0x222F	; 0x80222f <USB_ControlRequest+0x7>
     ab6:	c0 17       	cp	r28, r16
     ab8:	d1 07       	cpc	r29, r17
     aba:	38 f0       	brcs	.+14     	; 0xaca <Endpoint_Write_Control_Stream_LE+0x3a>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     abc:	01 15       	cp	r16, r1
     abe:	11 05       	cpc	r17, r1
	  Endpoint_ClearIN();
     ac0:	19 f4       	brne	.+6      	; 0xac8 <Endpoint_Write_Control_Stream_LE+0x38>
     ac2:	6e d0       	rcall	.+220    	; 0xba0 <Endpoint_ClearIN>
     ac4:	e8 01       	movw	r28, r16
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <Endpoint_Write_Control_Stream_LE+0x3a>
     ac8:	e8 01       	movw	r28, r16
     aca:	ec 2c       	mov	r14, r12
     acc:	fd 2c       	mov	r15, r13
     ace:	d1 2c       	mov	r13, r1
     ad0:	44 c0       	rjmp	.+136    	; 0xb5a <Endpoint_Write_Control_Stream_LE+0xca>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ad2:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ad6:	88 23       	and	r24, r24
     ad8:	09 f4       	brne	.+2      	; 0xadc <Endpoint_Write_Control_Stream_LE+0x4c>
     ada:	50 c0       	rjmp	.+160    	; 0xb7c <Endpoint_Write_Control_Stream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     adc:	85 30       	cpi	r24, 0x05	; 5
     ade:	09 f4       	brne	.+2      	; 0xae2 <Endpoint_Write_Control_Stream_LE+0x52>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ae0:	4f c0       	rjmp	.+158    	; 0xb80 <Endpoint_Write_Control_Stream_LE+0xf0>
     ae2:	0b d1       	rcall	.+534    	; 0xcfa <Endpoint_IsSETUPReceived>
     ae4:	81 11       	cpse	r24, r1
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ae6:	4e c0       	rjmp	.+156    	; 0xb84 <Endpoint_Write_Control_Stream_LE+0xf4>
     ae8:	ef d0       	rcall	.+478    	; 0xcc8 <Endpoint_IsOUTReceived>
     aea:	81 11       	cpse	r24, r1
		  break;

		if (Endpoint_IsINReady())
     aec:	42 c0       	rjmp	.+132    	; 0xb72 <Endpoint_Write_Control_Stream_LE+0xe2>
     aee:	e0 d0       	rcall	.+448    	; 0xcb0 <Endpoint_IsINReady>
     af0:	88 23       	and	r24, r24
     af2:	99 f1       	breq	.+102    	; 0xb5a <Endpoint_Write_Control_Stream_LE+0xca>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
     af4:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     af8:	88 23       	and	r24, r24
     afa:	74 f4       	brge	.+28     	; 0xb18 <Endpoint_Write_Control_Stream_LE+0x88>
				  return USB_Endpoint_SelectedFIFO->Position;
     afc:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     b00:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     b04:	ef 5b       	subi	r30, 0xBF	; 191
     b06:	ff 4f       	sbci	r31, 0xFF	; 255
     b08:	00 81       	ld	r16, Z
     b0a:	10 e0       	ldi	r17, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b0c:	20 97       	sbiw	r28, 0x00	; 0
     b0e:	f1 f0       	breq	.+60     	; 0xb4c <Endpoint_Write_Control_Stream_LE+0xbc>
     b10:	08 30       	cpi	r16, 0x08	; 8
     b12:	11 05       	cpc	r17, r1
     b14:	78 f0       	brcs	.+30     	; 0xb34 <Endpoint_Write_Control_Stream_LE+0xa4>
     b16:	1a c0       	rjmp	.+52     	; 0xb4c <Endpoint_Write_Control_Stream_LE+0xbc>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
     b18:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     b1c:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     b20:	fc 01       	movw	r30, r24
     b22:	e0 5c       	subi	r30, 0xC0	; 192
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	00 81       	ld	r16, Z
     b28:	31 96       	adiw	r30, 0x01	; 1
     b2a:	80 81       	ld	r24, Z
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	08 1b       	sub	r16, r24
     b30:	11 09       	sbc	r17, r1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b32:	ec cf       	rjmp	.-40     	; 0xb0c <Endpoint_Write_Control_Stream_LE+0x7c>
     b34:	f7 01       	movw	r30, r14
     b36:	81 91       	ld	r24, Z+
     b38:	7f 01       	movw	r14, r30
     b3a:	6a d0       	rcall	.+212    	; 0xc10 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b3c:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b42:	20 97       	sbiw	r28, 0x00	; 0
     b44:	19 f0       	breq	.+6      	; 0xb4c <Endpoint_Write_Control_Stream_LE+0xbc>
     b46:	08 30       	cpi	r16, 0x08	; 8
     b48:	11 05       	cpc	r17, r1
     b4a:	a1 f7       	brne	.-24     	; 0xb34 <Endpoint_Write_Control_Stream_LE+0xa4>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b4c:	dd 24       	eor	r13, r13
     b4e:	d3 94       	inc	r13
     b50:	08 30       	cpi	r16, 0x08	; 8
     b52:	11 05       	cpc	r17, r1
     b54:	09 f0       	breq	.+2      	; 0xb58 <Endpoint_Write_Control_Stream_LE+0xc8>
			Endpoint_ClearIN();
     b56:	d1 2c       	mov	r13, r1
     b58:	23 d0       	rcall	.+70     	; 0xba0 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b5a:	20 97       	sbiw	r28, 0x00	; 0
     b5c:	09 f0       	breq	.+2      	; 0xb60 <Endpoint_Write_Control_Stream_LE+0xd0>
     b5e:	b9 cf       	rjmp	.-142    	; 0xad2 <Endpoint_Write_Control_Stream_LE+0x42>
     b60:	d1 10       	cpse	r13, r1
     b62:	b7 cf       	rjmp	.-146    	; 0xad2 <Endpoint_Write_Control_Stream_LE+0x42>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b64:	06 c0       	rjmp	.+12     	; 0xb72 <Endpoint_Write_Control_Stream_LE+0xe2>
     b66:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b6a:	88 23       	and	r24, r24
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b6c:	69 f0       	breq	.+26     	; 0xb88 <Endpoint_Write_Control_Stream_LE+0xf8>
     b6e:	85 30       	cpi	r24, 0x05	; 5
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b70:	69 f0       	breq	.+26     	; 0xb8c <Endpoint_Write_Control_Stream_LE+0xfc>
     b72:	aa d0       	rcall	.+340    	; 0xcc8 <Endpoint_IsOUTReceived>
     b74:	88 23       	and	r24, r24
     b76:	b9 f3       	breq	.-18     	; 0xb66 <Endpoint_Write_Control_Stream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	09 c0       	rjmp	.+18     	; 0xb8e <Endpoint_Write_Control_Stream_LE+0xfe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <Endpoint_Write_Control_Stream_LE+0xfe>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <Endpoint_Write_Control_Stream_LE+0xfe>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <Endpoint_Write_Control_Stream_LE+0xfe>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <Endpoint_Write_Control_Stream_LE+0xfe>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	08 95       	ret

00000ba0 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
     ba0:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     ba4:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     ba8:	a0 91 30 22 	lds	r26, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     bac:	b0 91 31 22 	lds	r27, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     bb0:	af 5b       	subi	r26, 0xBF	; 191
     bb2:	bf 4f       	sbci	r27, 0xFF	; 255
     bb4:	8c 91       	ld	r24, X
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	82 83       	std	Z+2, r24	; 0x02
     bba:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     bbc:	80 81       	ld	r24, Z
     bbe:	8d 79       	andi	r24, 0x9D	; 157
     bc0:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
     bc2:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     bc6:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     bca:	ef 5b       	subi	r30, 0xBF	; 191
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	10 82       	st	Z, r1
     bd0:	08 95       	ret

00000bd2 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     bd2:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     bd6:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     bda:	80 81       	ld	r24, Z
     bdc:	8d 79       	andi	r24, 0x9D	; 157
     bde:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
     be0:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     be4:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     be8:	ef 5b       	subi	r30, 0xBF	; 191
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	10 82       	st	Z, r1
     bee:	08 95       	ret

00000bf0 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
     bf0:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     bf4:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     bf8:	fc 01       	movw	r30, r24
     bfa:	ef 5b       	subi	r30, 0xBF	; 191
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	20 81       	ld	r18, Z
     c00:	31 e0       	ldi	r19, 0x01	; 1
     c02:	32 0f       	add	r19, r18
     c04:	30 83       	st	Z, r19
     c06:	fc 01       	movw	r30, r24
     c08:	e2 0f       	add	r30, r18
     c0a:	f1 1d       	adc	r31, r1
     c0c:	80 81       	ld	r24, Z
}
     c0e:	08 95       	ret

00000c10 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
     c10:	20 91 30 22 	lds	r18, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     c14:	30 91 31 22 	lds	r19, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     c18:	f9 01       	movw	r30, r18
     c1a:	ef 5b       	subi	r30, 0xBF	; 191
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	90 81       	ld	r25, Z
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	49 0f       	add	r20, r25
     c24:	40 83       	st	Z, r20
     c26:	f9 01       	movw	r30, r18
     c28:	e9 0f       	add	r30, r25
     c2a:	f1 1d       	adc	r31, r1
     c2c:	80 83       	st	Z, r24
     c2e:	08 95       	ret

00000c30 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
     c30:	80 93 34 22 	sts	0x2234, r24	; 0x802234 <USB_Endpoint_SelectedEndpoint>

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
     c34:	28 2f       	mov	r18, r24
     c36:	2f 70       	andi	r18, 0x0F	; 15
     c38:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
     c3a:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
     c3e:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>

	if (Address & ENDPOINT_DIR_IN)
     c42:	88 23       	and	r24, r24
     c44:	e4 f4       	brge	.+56     	; 0xc7e <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
     c46:	64 e8       	ldi	r22, 0x84	; 132
     c48:	62 9f       	mul	r22, r18
     c4a:	c0 01       	movw	r24, r0
     c4c:	63 9f       	mul	r22, r19
     c4e:	90 0d       	add	r25, r0
     c50:	11 24       	eor	r1, r1
     c52:	89 58       	subi	r24, 0x89	; 137
     c54:	9d 4d       	sbci	r25, 0xDD	; 221
     c56:	80 93 30 22 	sts	0x2230, r24	; 0x802230 <USB_Endpoint_SelectedFIFO>
     c5a:	90 93 31 22 	sts	0x2231, r25	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
     c5e:	c9 01       	movw	r24, r18
     c60:	82 95       	swap	r24
     c62:	92 95       	swap	r25
     c64:	90 7f       	andi	r25, 0xF0	; 240
     c66:	98 27       	eor	r25, r24
     c68:	80 7f       	andi	r24, 0xF0	; 240
     c6a:	98 27       	eor	r25, r24
     c6c:	08 96       	adiw	r24, 0x08	; 8
     c6e:	9a 01       	movw	r18, r20
     c70:	28 0f       	add	r18, r24
     c72:	39 1f       	adc	r19, r25
     c74:	20 93 32 22 	sts	0x2232, r18	; 0x802232 <USB_Endpoint_SelectedHandle>
     c78:	30 93 33 22 	sts	0x2233, r19	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     c7c:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
     c7e:	64 e8       	ldi	r22, 0x84	; 132
     c80:	62 9f       	mul	r22, r18
     c82:	c0 01       	movw	r24, r0
     c84:	63 9f       	mul	r22, r19
     c86:	90 0d       	add	r25, r0
     c88:	11 24       	eor	r1, r1
     c8a:	8b 5c       	subi	r24, 0xCB	; 203
     c8c:	9d 4d       	sbci	r25, 0xDD	; 221
     c8e:	80 93 30 22 	sts	0x2230, r24	; 0x802230 <USB_Endpoint_SelectedFIFO>
     c92:	90 93 31 22 	sts	0x2231, r25	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
     c96:	22 95       	swap	r18
     c98:	32 95       	swap	r19
     c9a:	30 7f       	andi	r19, 0xF0	; 240
     c9c:	32 27       	eor	r19, r18
     c9e:	20 7f       	andi	r18, 0xF0	; 240
     ca0:	32 27       	eor	r19, r18
     ca2:	24 0f       	add	r18, r20
     ca4:	35 1f       	adc	r19, r21
     ca6:	20 93 32 22 	sts	0x2232, r18	; 0x802232 <USB_Endpoint_SelectedHandle>
     caa:	30 93 33 22 	sts	0x2233, r19	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     cae:	08 95       	ret

00000cb0 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     cb0:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	bc df       	rcall	.-136    	; 0xc30 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
     cb8:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     cbc:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     cc0:	80 81       	ld	r24, Z
}
     cc2:	86 95       	lsr	r24
     cc4:	81 70       	andi	r24, 0x01	; 1
     cc6:	08 95       	ret

00000cc8 <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     cc8:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	b0 df       	rcall	.-160    	; 0xc30 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
     cd0:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     cd4:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     cd8:	80 81       	ld	r24, Z
     cda:	85 ff       	sbrs	r24, 5
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     cde:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     ce2:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     ce6:	22 81       	ldd	r18, Z+2	; 0x02
     ce8:	33 81       	ldd	r19, Z+3	; 0x03
     cea:	fc 01       	movw	r30, r24
     cec:	e0 5c       	subi	r30, 0xC0	; 192
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	20 83       	st	Z, r18
		return true;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	08 95       	ret
	}

	return false;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
}
     cf8:	08 95       	ret

00000cfa <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     cfa:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     cfe:	8f 77       	andi	r24, 0x7F	; 127
     d00:	97 df       	rcall	.-210    	; 0xc30 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
     d02:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     d06:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     d0a:	80 81       	ld	r24, Z
     d0c:	84 ff       	sbrs	r24, 4
     d0e:	0c c0       	rjmp	.+24     	; 0xd28 <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
     d10:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     d14:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     d18:	22 81       	ldd	r18, Z+2	; 0x02
     d1a:	33 81       	ldd	r19, Z+3	; 0x03
     d1c:	fc 01       	movw	r30, r24
     d1e:	e0 5c       	subi	r30, 0xC0	; 192
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	20 83       	st	Z, r18
		return true;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	08 95       	ret
	}

	return false;
     d28:	80 e0       	ldi	r24, 0x00	; 0
}
     d2a:	08 95       	ret

00000d2c <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
     d2c:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     d30:	8f 77       	andi	r24, 0x7F	; 127
     d32:	7e df       	rcall	.-260    	; 0xc30 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
     d34:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     d38:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     d3c:	80 81       	ld	r24, Z
     d3e:	8d 78       	andi	r24, 0x8D	; 141
     d40:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
     d42:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     d46:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     d4a:	80 81       	ld	r24, Z
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
     d50:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     d54:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     d58:	ef 5b       	subi	r30, 0xBF	; 191
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
     d5e:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     d62:	80 68       	ori	r24, 0x80	; 128
     d64:	65 df       	rcall	.-310    	; 0xc30 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
     d66:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     d6a:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     d6e:	80 81       	ld	r24, Z
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
     d74:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     d78:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     d7c:	ef 5b       	subi	r30, 0xBF	; 191
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	10 82       	st	Z, r1
     d82:	08 95       	ret

00000d84 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
     d84:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     d88:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	84 60       	ori	r24, 0x04	; 4
     d90:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
     d92:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     d96:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	80 7c       	andi	r24, 0xC0	; 192
     d9e:	80 34       	cpi	r24, 0x40	; 64
     da0:	59 f4       	brne	.+22     	; 0xdb8 <Endpoint_StallTransaction+0x34>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
     da2:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>
     da6:	80 58       	subi	r24, 0x80	; 128
     da8:	43 df       	rcall	.-378    	; 0xc30 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
     daa:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     dae:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	81 83       	std	Z+1, r24	; 0x01
     db8:	08 95       	ret

00000dba <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	d8 2f       	mov	r29, r24
     dc2:	16 2f       	mov	r17, r22
     dc4:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
     dc6:	34 df       	rcall	.-408    	; 0xc30 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
     dc8:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     dcc:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     dd0:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
     dd2:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     dd6:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     dda:	dd 23       	and	r29, r29
     ddc:	a4 f0       	brlt	.+40     	; 0xe06 <Endpoint_ConfigureEndpoint_PRV+0x4c>
     dde:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
     de0:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     de4:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     de8:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
     dea:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     dee:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     df2:	12 82       	std	Z+2, r1	; 0x02
     df4:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
     df6:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     dfa:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     dfe:	84 83       	std	Z+4, r24	; 0x04
     e00:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <Endpoint_ConfigureEndpoint_PRV+0x74>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
     e0a:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     e0e:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     e12:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
     e14:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
     e18:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     e1c:	12 82       	std	Z+2, r1	; 0x02
     e1e:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
     e20:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <USB_Endpoint_SelectedFIFO>
     e24:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <USB_Endpoint_SelectedFIFO+0x1>
     e28:	84 83       	std	Z+4, r24	; 0x04
     e2a:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
     e2c:	4c 2f       	mov	r20, r28
     e2e:	fc 01       	movw	r30, r24
     e30:	e0 5c       	subi	r30, 0xC0	; 192
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
     e36:	31 96       	adiw	r30, 0x01	; 1
     e38:	10 82       	st	Z, r1

	return true;
}
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	08 95       	ret

00000e44 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
     e54:	66 23       	and	r22, r22
     e56:	09 f4       	brne	.+2      	; 0xe5a <Endpoint_ConfigureEndpointTable+0x16>
     e58:	4a c0       	rjmp	.+148    	; 0xeee <Endpoint_ConfigureEndpointTable+0xaa>
     e5a:	c6 2e       	mov	r12, r22
     e5c:	08 2f       	mov	r16, r24
     e5e:	19 2f       	mov	r17, r25
     e60:	d1 2c       	mov	r13, r1
	{
		if (!(Table[i].Address))
     e62:	f8 01       	movw	r30, r16
     e64:	e0 80       	ld	r14, Z
     e66:	ee 20       	and	r14, r14
     e68:	d9 f1       	breq	.+118    	; 0xee0 <Endpoint_ConfigureEndpointTable+0x9c>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     e6a:	c1 81       	ldd	r28, Z+1	; 0x01
     e6c:	d2 81       	ldd	r29, Z+2	; 0x02
     e6e:	43 81       	ldd	r20, Z+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
     e70:	84 81       	ldd	r24, Z+4	; 0x04
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	10 f4       	brcc	.+4      	; 0xe7a <Endpoint_ConfigureEndpointTable+0x36>
     e76:	38 e0       	ldi	r19, 0x08	; 8
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <Endpoint_ConfigureEndpointTable+0x38>
     e7a:	38 e1       	ldi	r19, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e7c:	c9 30       	cpi	r28, 0x09	; 9
     e7e:	d1 05       	cpc	r29, r1
     e80:	50 f0       	brcs	.+20     	; 0xe96 <Endpoint_ConfigureEndpointTable+0x52>
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
				{
					MaskVal++;
     e88:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e8e:	8c 17       	cp	r24, r28
     e90:	9d 07       	cpc	r25, r29
     e92:	d0 f3       	brcs	.-12     	; 0xe88 <Endpoint_ConfigureEndpointTable+0x44>
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <Endpoint_ConfigureEndpointTable+0x54>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     e96:	20 e0       	ldi	r18, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
     e98:	23 2b       	or	r18, r19

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
     e9a:	8e 2d       	mov	r24, r14
     e9c:	8f 70       	andi	r24, 0x0F	; 15
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	05 97       	sbiw	r24, 0x05	; 5
     ea2:	3c f5       	brge	.+78     	; 0xef2 <Endpoint_ConfigureEndpointTable+0xae>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
     ea4:	2f 7e       	andi	r18, 0xEF	; 239
				if (Size > 64)
     ea6:	c1 34       	cpi	r28, 0x41	; 65
     ea8:	d1 05       	cpc	r29, r1
     eaa:	28 f5       	brcc	.+74     	; 0xef6 <Endpoint_ConfigureEndpointTable+0xb2>
				  return false;

				switch (Type)
     eac:	44 23       	and	r20, r20
     eae:	19 f0       	breq	.+6      	; 0xeb6 <Endpoint_ConfigureEndpointTable+0x72>
     eb0:	41 30       	cpi	r20, 0x01	; 1
     eb2:	21 f0       	breq	.+8      	; 0xebc <Endpoint_ConfigureEndpointTable+0x78>
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <Endpoint_ConfigureEndpointTable+0x7e>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
     eb6:	20 64       	ori	r18, 0x40	; 64
     eb8:	f2 2e       	mov	r15, r18
     eba:	07 c0       	rjmp	.+14     	; 0xeca <Endpoint_ConfigureEndpointTable+0x86>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
     ebc:	20 6c       	ori	r18, 0xC0	; 192
     ebe:	f2 2e       	mov	r15, r18
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <Endpoint_ConfigureEndpointTable+0x90>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
     ec2:	20 68       	ori	r18, 0x80	; 128
     ec4:	f2 2e       	mov	r15, r18
						break;
				}

				if (Type == EP_TYPE_CONTROL)
     ec6:	41 11       	cpse	r20, r1
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <Endpoint_ConfigureEndpointTable+0x90>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
     eca:	4c 2f       	mov	r20, r28
     ecc:	6f 2d       	mov	r22, r15
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	8e 0d       	add	r24, r14
     ed2:	73 df       	rcall	.-282    	; 0xdba <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
     ed4:	4c 2f       	mov	r20, r28
     ed6:	6f 2d       	mov	r22, r15
     ed8:	8e 2d       	mov	r24, r14
     eda:	6f df       	rcall	.-290    	; 0xdba <Endpoint_ConfigureEndpoint_PRV>
     edc:	88 23       	and	r24, r24
     ede:	61 f0       	breq	.+24     	; 0xef8 <Endpoint_ConfigureEndpointTable+0xb4>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     ee0:	d3 94       	inc	r13
     ee2:	0b 5f       	subi	r16, 0xFB	; 251
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	cd 10       	cpse	r12, r13
     ee8:	bc cf       	rjmp	.-136    	; 0xe62 <Endpoint_ConfigureEndpointTable+0x1e>
		{
			return false;
		}
	}

	return true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <Endpoint_ConfigureEndpointTable+0xb4>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <Endpoint_ConfigureEndpointTable+0xb4>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <Endpoint_ConfigureEndpointTable+0xb4>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	08 95       	ret

00000f0a <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
     f0e:	a0 ec       	ldi	r26, 0xC0	; 192
     f10:	b4 e0       	ldi	r27, 0x04	; 4
     f12:	16 96       	adiw	r26, 0x06	; 6
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	17 97       	sbiw	r26, 0x07	; 7
     f1a:	c9 01       	movw	r24, r18
     f1c:	82 95       	swap	r24
     f1e:	92 95       	swap	r25
     f20:	90 7f       	andi	r25, 0xF0	; 240
     f22:	98 27       	eor	r25, r24
     f24:	80 7f       	andi	r24, 0xF0	; 240
     f26:	98 27       	eor	r25, r24
     f28:	e8 0f       	add	r30, r24
     f2a:	f9 1f       	adc	r31, r25
     f2c:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	4d 91       	ld	r20, X+
     f32:	5c 91       	ld	r21, X
     f34:	17 97       	sbiw	r26, 0x07	; 7
     f36:	fa 01       	movw	r30, r20
     f38:	e8 0f       	add	r30, r24
     f3a:	f9 1f       	adc	r31, r25
     f3c:	11 82       	std	Z+1, r1	; 0x01
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     f42:	25 30       	cpi	r18, 0x05	; 5
     f44:	31 05       	cpc	r19, r1
     f46:	29 f7       	brne	.-54     	; 0xf12 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
     f48:	08 95       	ret

00000f4a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     f4a:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <USB_ControlRequest>
     f4e:	88 23       	and	r24, r24
     f50:	74 f4       	brge	.+28     	; 0xf6e <Endpoint_ClearStatusStage+0x24>
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     f54:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>
     f58:	88 23       	and	r24, r24
     f5a:	69 f0       	breq	.+26     	; 0xf76 <Endpoint_ClearStatusStage+0x2c>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     f5c:	b5 de       	rcall	.-662    	; 0xcc8 <Endpoint_IsOUTReceived>
     f5e:	88 23       	and	r24, r24
     f60:	c9 f3       	breq	.-14     	; 0xf54 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
     f62:	37 ce       	rjmp	.-914    	; 0xbd2 <Endpoint_ClearOUT>
     f64:	08 95       	ret
     f66:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     f6a:	88 23       	and	r24, r24
     f6c:	21 f0       	breq	.+8      	; 0xf76 <Endpoint_ClearStatusStage+0x2c>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     f6e:	a0 de       	rcall	.-704    	; 0xcb0 <Endpoint_IsINReady>
     f70:	88 23       	and	r24, r24
     f72:	c9 f3       	breq	.-14     	; 0xf66 <Endpoint_ClearStatusStage+0x1c>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
     f74:	15 ce       	rjmp	.-982    	; 0xba0 <Endpoint_ClearIN>
     f76:	08 95       	ret

00000f78 <Endpoint_WaitUntilReady>:
     f78:	ff 92       	push	r15
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
     f82:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
     f86:	f0 91 c7 04 	lds	r31, 0x04C7	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
     f8a:	e0 5b       	subi	r30, 0xB0	; 176
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	c0 81       	ld	r28, Z
     f90:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     f92:	0f 2e       	mov	r0, r31
     f94:	f4 e6       	ldi	r31, 0x64	; 100
     f96:	ff 2e       	mov	r15, r31
     f98:	f0 2d       	mov	r31, r0
     f9a:	00 ec       	ldi	r16, 0xC0	; 192
     f9c:	14 e0       	ldi	r17, 0x04	; 4
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <Endpoint_WaitUntilReady+0x2c>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     fa0:	f2 2e       	mov	r15, r18
     fa2:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
     fa4:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <USB_Endpoint_SelectedEndpoint>

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     fa8:	88 23       	and	r24, r24
     faa:	24 f4       	brge	.+8      	; 0xfb4 <Endpoint_WaitUntilReady+0x3c>
		{
			if (Endpoint_IsINReady())
     fac:	81 de       	rcall	.-766    	; 0xcb0 <Endpoint_IsINReady>
     fae:	88 23       	and	r24, r24
     fb0:	21 f0       	breq	.+8      	; 0xfba <Endpoint_WaitUntilReady+0x42>
     fb2:	22 c0       	rjmp	.+68     	; 0xff8 <Endpoint_WaitUntilReady+0x80>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     fb4:	89 de       	rcall	.-750    	; 0xcc8 <Endpoint_IsOUTReceived>
     fb6:	81 11       	cpse	r24, r1
     fb8:	21 c0       	rjmp	.+66     	; 0xffc <Endpoint_WaitUntilReady+0x84>
     fba:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <USB_DeviceState>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fbe:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fc0:	f9 f0       	breq	.+62     	; 0x1000 <Endpoint_WaitUntilReady+0x88>
     fc2:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fc4:	f9 f0       	breq	.+62     	; 0x1004 <Endpoint_WaitUntilReady+0x8c>
     fc6:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <USB_Endpoint_SelectedHandle>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
     fca:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <USB_Endpoint_SelectedHandle+0x1>
     fce:	81 81       	ldd	r24, Z+1	; 0x01
     fd0:	82 fd       	sbrc	r24, 2
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     fd2:	1a c0       	rjmp	.+52     	; 0x1008 <Endpoint_WaitUntilReady+0x90>
     fd4:	d8 01       	movw	r26, r16
     fd6:	16 96       	adiw	r26, 0x06	; 6
     fd8:	ed 91       	ld	r30, X+
     fda:	fc 91       	ld	r31, X
     fdc:	17 97       	sbiw	r26, 0x07	; 7
     fde:	e0 5b       	subi	r30, 0xB0	; 176
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	c8 17       	cp	r28, r24
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     fe8:	d9 07       	cpc	r29, r25
     fea:	d9 f2       	breq	.-74     	; 0xfa2 <Endpoint_WaitUntilReady+0x2a>
     fec:	2f ef       	ldi	r18, 0xFF	; 255
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     fee:	2f 0d       	add	r18, r15
     ff0:	f1 10       	cpse	r15, r1
     ff2:	d6 cf       	rjmp	.-84     	; 0xfa0 <Endpoint_WaitUntilReady+0x28>
     ff4:	84 e0       	ldi	r24, 0x04	; 4
			  return ENDPOINT_READYWAIT_Timeout;
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <Endpoint_WaitUntilReady+0x92>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <Endpoint_WaitUntilReady+0x92>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <Endpoint_WaitUntilReady+0x92>
    1000:	82 e0       	ldi	r24, 0x02	; 2
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1002:	03 c0       	rjmp	.+6      	; 0x100a <Endpoint_WaitUntilReady+0x92>
    1004:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1006:	01 c0       	rjmp	.+2      	; 0x100a <Endpoint_WaitUntilReady+0x92>
    1008:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    100a:	df 91       	pop	r29

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	08 95       	ret

00001016 <USB_ResetInterface>:
    1016:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <USB_Options>
}

void USB_ResetInterface(void)
{
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
    101a:	80 ff       	sbrs	r24, 0
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <USB_ResetInterface+0x10>
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
    101e:	88 e3       	ldi	r24, 0x38	; 56
    1020:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__TEXT_REGION_LENGTH__+0x700044>
    1024:	02 c0       	rjmp	.+4      	; 0x102a <USB_ResetInterface+0x14>
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
    1026:	10 92 44 00 	sts	0x0044, r1	; 0x800044 <__TEXT_REGION_LENGTH__+0x700044>
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
    102a:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <USB_Options>
    102e:	83 ff       	sbrs	r24, 3
    1030:	06 c0       	rjmp	.+12     	; 0x103e <USB_ResetInterface+0x28>
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
    1032:	e0 e4       	ldi	r30, 0x40	; 64
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	84 81       	ldd	r24, Z+4	; 0x04
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	84 83       	std	Z+4, r24	; 0x04
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <USB_ResetInterface+0x32>
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    103e:	e0 e4       	ldi	r30, 0x40	; 64
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	83 60       	ori	r24, 0x03	; 3
    1046:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    1048:	6c d0       	rcall	.+216    	; 0x1122 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    104a:	72 d0       	rcall	.+228    	; 0x1130 <USB_INT_ClearAllInterrupts>
    104c:	e0 ec       	ldi	r30, 0xC0	; 192
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    104e:	f4 e0       	ldi	r31, 0x04	; 4
    1050:	80 81       	ld	r24, Z
    1052:	8f 77       	andi	r24, 0x7F	; 127
    1054:	80 83       	st	Z, r24
    1056:	80 81       	ld	r24, Z
				USB.CTRLA |=  USB_ENABLE_bm;
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	80 83       	st	Z, r24
    105c:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1060:	10 92 23 22 	sts	0x2223, r1	; 0x802223 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1064:	10 92 25 22 	sts	0x2225, r1	; 0x802225 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1068:	10 92 24 22 	sts	0x2224, r1	; 0x802224 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    106c:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <USB_Options>
		#endif
	}
	#endif
	#endif

	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
    1070:	80 ff       	sbrs	r24, 0
    1072:	04 c0       	rjmp	.+8      	; 0x107c <USB_ResetInterface+0x66>
    1074:	80 81       	ld	r24, Z
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetLowSpeed(void)
			{
				USB.CTRLA &= ~USB_SPEED_bm;
    1076:	8f 7b       	andi	r24, 0xBF	; 191
    1078:	80 83       	st	Z, r24
    107a:	05 c0       	rjmp	.+10     	; 0x1086 <USB_ResetInterface+0x70>
    107c:	e0 ec       	ldi	r30, 0xC0	; 192
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    107e:	f4 e0       	ldi	r31, 0x04	; 4
    1080:	80 81       	ld	r24, Z
    1082:	80 64       	ori	r24, 0x40	; 64
    1084:	80 83       	st	Z, r24
    1086:	48 e0       	ldi	r20, 0x08	; 8
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1088:	68 e4       	ldi	r22, 0x48	; 72
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	96 de       	rcall	.-724    	; 0xdba <Endpoint_ConfigureEndpoint_PRV>
    108e:	48 e0       	ldi	r20, 0x08	; 8

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1090:	68 e4       	ldi	r22, 0x48	; 72
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	92 de       	rcall	.-732    	; 0xdba <Endpoint_ConfigureEndpoint_PRV>
    1096:	e0 ec       	ldi	r30, 0xC0	; 192
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    1098:	f4 e0       	ldi	r31, 0x04	; 4
    109a:	80 85       	ldd	r24, Z+8	; 0x08
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	80 87       	std	Z+8, r24	; 0x08
    10a0:	81 81       	ldd	r24, Z+1	; 0x01
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    10a2:	81 60       	ori	r24, 0x01	; 1
    10a4:	81 83       	std	Z+1, r24	; 0x01
    10a6:	08 95       	ret

000010a8 <USB_Init>:
    10a8:	cf 93       	push	r28

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    10aa:	df 93       	push	r29
	#if !defined(USE_STATIC_OPTIONS)
	USB_Options = Options;
    10ac:	80 93 1c 25 	sts	0x251C, r24	; 0x80251c <USB_Options>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    10b0:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    10b2:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    10b4:	c0 ec       	ldi	r28, 0xC0	; 192
    10b6:	d1 e0       	ldi	r29, 0x01	; 1
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    10bc:	ea e1       	ldi	r30, 0x1A	; 26
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	e4 91       	lpm	r30, Z
    10c2:	a0 ec       	ldi	r26, 0xC0	; 192
    10c4:	b4 e0       	ldi	r27, 0x04	; 4
    10c6:	da 96       	adiw	r26, 0x3a	; 58
    10c8:	ec 93       	st	X, r30
    10ca:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    10cc:	eb e1       	ldi	r30, 0x1B	; 27
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	e4 91       	lpm	r30, Z
    10d2:	db 96       	adiw	r26, 0x3b	; 59
    10d4:	ec 93       	st	X, r30
    10d6:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    10d8:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    10da:	8a ec       	ldi	r24, 0xCA	; 202
    10dc:	94 e2       	ldi	r25, 0x24	; 36
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	16 96       	adiw	r26, 0x06	; 6
    10e2:	8d 93       	st	X+, r24
    10e4:	9c 93       	st	X, r25
    10e6:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    10e8:	84 e1       	ldi	r24, 0x14	; 20
    10ea:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
    10ec:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <USB_Options>
    10f0:	82 ff       	sbrs	r24, 2
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <USB_Init+0x54>
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <USB_Init+0x6a>
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
    10fc:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <USB_Options>
    1100:	81 ff       	sbrs	r24, 1
    1102:	04 c0       	rjmp	.+8      	; 0x110c <USB_Init+0x64>
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <USB_Init+0x6a>
	else
	  USB.INTCTRLA = (1 << USB_INTLVL_gp);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1112:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <USB_IsInitialized>

	USB_ResetInterface();
    111a:	7d df       	rcall	.-262    	; 0x1016 <USB_ResetInterface>
}
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    1122:	e0 ec       	ldi	r30, 0xC0	; 192
    1124:	f4 e0       	ldi	r31, 0x04	; 4
    1126:	80 85       	ldd	r24, Z+8	; 0x08
    1128:	83 70       	andi	r24, 0x03	; 3
    112a:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    112c:	11 86       	std	Z+9, r1	; 0x09
    112e:	08 95       	ret

00001130 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    1130:	e0 ec       	ldi	r30, 0xC0	; 192
    1132:	f4 e0       	ldi	r31, 0x04	; 4
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    1138:	84 87       	std	Z+12, r24	; 0x0c
    113a:	08 95       	ret

0000113c <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    115e:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1162:	88 23       	and	r24, r24
    1164:	44 f4       	brge	.+16     	; 0x1176 <__vector_125+0x3a>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    1166:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    116a:	88 23       	and	r24, r24
    116c:	24 f4       	brge	.+8      	; 0x1176 <__vector_125+0x3a>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    116e:	80 e8       	ldi	r24, 0x80	; 128
    1170:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1174:	7c dc       	rcall	.-1800   	; 0xa6e <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    1176:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    117a:	86 ff       	sbrs	r24, 6
    117c:	06 c0       	rjmp	.+12     	; 0x118a <__vector_125+0x4e>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    117e:	80 e4       	ldi	r24, 0x40	; 64
    1180:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1184:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
    1188:	dc d3       	rcall	.+1976   	; 0x1942 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    118a:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    118e:	85 ff       	sbrs	r24, 5
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <__vector_125+0x80>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    1198:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <USB_Device_ConfigurationNumber>
    119c:	88 23       	and	r24, r24
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__vector_125+0x6c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    11a0:	84 e0       	ldi	r24, 0x04	; 4
    11a2:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <USB_DeviceState>
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <__vector_125+0x7e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    11a8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    11ac:	81 11       	cpse	r24, r1
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <__vector_125+0x78>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <__vector_125+0x7a>
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <USB_DeviceState>

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    11ba:	c4 d3       	rcall	.+1928   	; 0x1944 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    11bc:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    11c0:	84 ff       	sbrs	r24, 4
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <__vector_125+0xb0>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    11c4:	e0 ec       	ldi	r30, 0xC0	; 192
    11c6:	f4 e0       	ldi	r31, 0x04	; 4
    11c8:	80 e1       	ldi	r24, 0x10	; 16
    11ca:	82 87       	std	Z+10, r24	; 0x0a
	{
		
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    11d2:	10 92 23 22 	sts	0x2223, r1	; 0x802223 <USB_Device_ConfigurationNumber>

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    11d6:	13 82       	std	Z+3, r1	; 0x03
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    11d8:	98 de       	rcall	.-720    	; 0xf0a <Endpoint_ClearEndpoints>
    11da:	48 e0       	ldi	r20, 0x08	; 8
    11dc:	68 e4       	ldi	r22, 0x48	; 72
    11de:	80 e8       	ldi	r24, 0x80	; 128

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    11e0:	ec dd       	rcall	.-1064   	; 0xdba <Endpoint_ConfigureEndpoint_PRV>
    11e2:	48 e0       	ldi	r20, 0x08	; 8
    11e4:	68 e4       	ldi	r22, 0x48	; 72
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	e8 dd       	rcall	.-1072   	; 0xdba <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    11ea:	41 dc       	rcall	.-1918   	; 0xa6e <USB_Event_Stub>
    11ec:	ff 91       	pop	r31
	}
}
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <spi0_write>:
    120e:	e0 ec       	ldi	r30, 0xC0	; 192
	can3_unstandby();
	return 1;
}

//reset
void all_reset(){	can1_reset();can2_reset();can3_reset();}
    1210:	f8 e0       	ldi	r31, 0x08	; 8
    1212:	92 81       	ldd	r25, Z+2	; 0x02
    1214:	92 83       	std	Z+2, r25	; 0x02
    1216:	83 83       	std	Z+3, r24	; 0x03
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	88 23       	and	r24, r24
    121c:	ec f7       	brge	.-6      	; 0x1218 <spi0_write+0xa>
    121e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    1222:	08 95       	ret

00001224 <can1_reset>:
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	c0 e4       	ldi	r28, 0x40	; 64
    122c:	d6 e0       	ldi	r29, 0x06	; 6
    122e:	10 e1       	ldi	r17, 0x10	; 16
    1230:	1e 83       	std	Y+6, r17	; 0x06
    1232:	80 ec       	ldi	r24, 0xC0	; 192
    1234:	ec df       	rcall	.-40     	; 0x120e <spi0_write>
    1236:	1d 83       	std	Y+5, r17	; 0x05
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	08 95       	ret

00001240 <can2_reset>:
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	c0 e6       	ldi	r28, 0x60	; 96
    1248:	d6 e0       	ldi	r29, 0x06	; 6
    124a:	10 e1       	ldi	r17, 0x10	; 16
    124c:	1e 83       	std	Y+6, r17	; 0x06
    124e:	80 ec       	ldi	r24, 0xC0	; 192
    1250:	de df       	rcall	.-68     	; 0x120e <spi0_write>
    1252:	1d 83       	std	Y+5, r17	; 0x05
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	08 95       	ret

0000125c <can3_reset>:
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	c0 e2       	ldi	r28, 0x20	; 32
    1264:	d6 e0       	ldi	r29, 0x06	; 6
    1266:	18 e0       	ldi	r17, 0x08	; 8
    1268:	1e 83       	std	Y+6, r17	; 0x06
    126a:	80 ec       	ldi	r24, 0xC0	; 192
    126c:	d0 df       	rcall	.-96     	; 0x120e <spi0_write>
    126e:	1d 83       	std	Y+5, r17	; 0x05
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	08 95       	ret

00001278 <can123_bit_modify>:
																		if(bus == 2){can2_select();can123_bit_modify(reg,mask,val);can2_deselect();}
																		if(bus == 3){can3_select();can123_bit_modify(reg,mask,val);can3_deselect();}}
void can1_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can1_select();can123_bit_modify(reg,mask,val);can1_deselect(); }
void can2_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can2_select();can123_bit_modify(reg,mask,val);can2_deselect(); }
void can3_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can3_select();can123_bit_modify(reg,mask,val);can3_deselect(); }
void can123_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){	spi0_write(MCP_BITMOD); spi0_write(reg); spi0_write(mask); spi0_write(val);}
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	18 2f       	mov	r17, r24
    1280:	d6 2f       	mov	r29, r22
    1282:	c4 2f       	mov	r28, r20
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	c3 df       	rcall	.-122    	; 0x120e <spi0_write>
    1288:	81 2f       	mov	r24, r17
    128a:	c1 df       	rcall	.-126    	; 0x120e <spi0_write>
    128c:	8d 2f       	mov	r24, r29
    128e:	bf df       	rcall	.-130    	; 0x120e <spi0_write>
    1290:	8c 2f       	mov	r24, r28
    1292:	bd df       	rcall	.-134    	; 0x120e <spi0_write>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	08 95       	ret

0000129c <can_bit_modify>:
void can1_reset(){ 	can1_select();spi0_write(MCP_RESET);can1_deselect(); }	
void can2_reset(){ 	can2_select();spi0_write(MCP_RESET);can2_deselect(); }
void can3_reset(){ 	can3_select();spi0_write(MCP_RESET);can3_deselect(); }

//bit modify
void can_bit_modify(uint8_t reg, uint8_t mask, uint8_t val, uint8_t bus){if(bus == 1){can1_select();can123_bit_modify(reg,mask,val);can1_deselect();}
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	21 30       	cpi	r18, 0x01	; 1
    12a4:	39 f4       	brne	.+14     	; 0x12b4 <can_bit_modify+0x18>
    12a6:	c0 e4       	ldi	r28, 0x40	; 64
    12a8:	d6 e0       	ldi	r29, 0x06	; 6
    12aa:	10 e1       	ldi	r17, 0x10	; 16
    12ac:	1e 83       	std	Y+6, r17	; 0x06
    12ae:	e4 df       	rcall	.-56     	; 0x1278 <can123_bit_modify>
    12b0:	1d 83       	std	Y+5, r17	; 0x05
    12b2:	11 c0       	rjmp	.+34     	; 0x12d6 <can_bit_modify+0x3a>
																		if(bus == 2){can2_select();can123_bit_modify(reg,mask,val);can2_deselect();}
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <can_bit_modify+0x2a>
    12b8:	c0 e6       	ldi	r28, 0x60	; 96
    12ba:	d6 e0       	ldi	r29, 0x06	; 6
    12bc:	10 e1       	ldi	r17, 0x10	; 16
    12be:	1e 83       	std	Y+6, r17	; 0x06
    12c0:	db df       	rcall	.-74     	; 0x1278 <can123_bit_modify>
    12c2:	1d 83       	std	Y+5, r17	; 0x05
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <can_bit_modify+0x3a>
																		if(bus == 3){can3_select();can123_bit_modify(reg,mask,val);can3_deselect();}}
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 f4       	brne	.+12     	; 0x12d6 <can_bit_modify+0x3a>
    12ca:	c0 e2       	ldi	r28, 0x20	; 32
    12cc:	d6 e0       	ldi	r29, 0x06	; 6
    12ce:	18 e0       	ldi	r17, 0x08	; 8
    12d0:	1e 83       	std	Y+6, r17	; 0x06
    12d2:	d2 df       	rcall	.-92     	; 0x1278 <can123_bit_modify>
    12d4:	1d 83       	std	Y+5, r17	; 0x05
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <can1_bit_modify>:
void can1_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can1_select();can123_bit_modify(reg,mask,val);can1_deselect(); }
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	c0 e4       	ldi	r28, 0x40	; 64
    12e6:	d6 e0       	ldi	r29, 0x06	; 6
    12e8:	10 e1       	ldi	r17, 0x10	; 16
    12ea:	1e 83       	std	Y+6, r17	; 0x06
    12ec:	c5 df       	rcall	.-118    	; 0x1278 <can123_bit_modify>
    12ee:	1d 83       	std	Y+5, r17	; 0x05
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	08 95       	ret

000012f8 <can2_bit_modify>:
void can2_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can2_select();can123_bit_modify(reg,mask,val);can2_deselect(); }
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	c0 e6       	ldi	r28, 0x60	; 96
    1300:	d6 e0       	ldi	r29, 0x06	; 6
    1302:	10 e1       	ldi	r17, 0x10	; 16
    1304:	1e 83       	std	Y+6, r17	; 0x06
    1306:	b8 df       	rcall	.-144    	; 0x1278 <can123_bit_modify>
    1308:	1d 83       	std	Y+5, r17	; 0x05
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	08 95       	ret

00001312 <can3_bit_modify>:
void can3_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can3_select();can123_bit_modify(reg,mask,val);can3_deselect(); }
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	c0 e2       	ldi	r28, 0x20	; 32
    131a:	d6 e0       	ldi	r29, 0x06	; 6
    131c:	18 e0       	ldi	r17, 0x08	; 8
    131e:	1e 83       	std	Y+6, r17	; 0x06
    1320:	ab df       	rcall	.-170    	; 0x1278 <can123_bit_modify>
    1322:	1d 83       	std	Y+5, r17	; 0x05
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	08 95       	ret

0000132c <can123_rts>:
void can1_rts(uint8_t channel){ can1_select(); can123_rts(channel); can1_deselect(); }
void can2_rts(uint8_t channel){ can2_select(); can123_rts(channel); can2_deselect(); }
void can3_rts(uint8_t channel){ can3_select(); can123_rts(channel); can3_deselect(); }

void can123_rts(uint8_t channel){
    switch (channel){
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	39 f0       	breq	.+14     	; 0x133e <can123_rts+0x12>
    1330:	18 f0       	brcs	.+6      	; 0x1338 <can123_rts+0xc>
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	39 f0       	breq	.+14     	; 0x1344 <can123_rts+0x18>
    1336:	08 95       	ret
    	case MCP_TX_0: spi0_write(MCP_RTS_TXB0); break;
    1338:	81 e8       	ldi	r24, 0x81	; 129
    133a:	69 cf       	rjmp	.-302    	; 0x120e <spi0_write>
    133c:	08 95       	ret
    	case MCP_TX_1: spi0_write(MCP_RTS_TXB1); break;
    133e:	82 e8       	ldi	r24, 0x82	; 130
    1340:	66 cf       	rjmp	.-308    	; 0x120e <spi0_write>
    1342:	08 95       	ret
    	case MCP_TX_2: spi0_write(MCP_RTS_TXB2); break;
    1344:	84 e8       	ldi	r24, 0x84	; 132
    1346:	63 cf       	rjmp	.-314    	; 0x120e <spi0_write>
    1348:	08 95       	ret

0000134a <can1_rts>:
    134a:	1f 93       	push	r17
void can2_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can2_select();can123_bit_modify(reg,mask,val);can2_deselect(); }
void can3_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can3_select();can123_bit_modify(reg,mask,val);can3_deselect(); }
void can123_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){	spi0_write(MCP_BITMOD); spi0_write(reg); spi0_write(mask); spi0_write(val);}

//RTS from SPI
void can1_rts(uint8_t channel){ can1_select(); can123_rts(channel); can1_deselect(); }
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	c0 e4       	ldi	r28, 0x40	; 64
    1352:	d6 e0       	ldi	r29, 0x06	; 6
    1354:	10 e1       	ldi	r17, 0x10	; 16
    1356:	1e 83       	std	Y+6, r17	; 0x06
    1358:	e9 df       	rcall	.-46     	; 0x132c <can123_rts>
    135a:	1d 83       	std	Y+5, r17	; 0x05
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	08 95       	ret

00001364 <can2_rts>:
void can2_rts(uint8_t channel){ can2_select(); can123_rts(channel); can2_deselect(); }
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	c0 e6       	ldi	r28, 0x60	; 96
    136c:	d6 e0       	ldi	r29, 0x06	; 6
    136e:	10 e1       	ldi	r17, 0x10	; 16
    1370:	1e 83       	std	Y+6, r17	; 0x06
    1372:	dc df       	rcall	.-72     	; 0x132c <can123_rts>
    1374:	1d 83       	std	Y+5, r17	; 0x05
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	08 95       	ret

0000137e <can3_rts>:
void can3_rts(uint8_t channel){ can3_select(); can123_rts(channel); can3_deselect(); }
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	c0 e2       	ldi	r28, 0x20	; 32
    1386:	d6 e0       	ldi	r29, 0x06	; 6
    1388:	18 e0       	ldi	r17, 0x08	; 8
    138a:	1e 83       	std	Y+6, r17	; 0x06
    138c:	cf df       	rcall	.-98     	; 0x132c <can123_rts>
    138e:	1d 83       	std	Y+5, r17	; 0x05
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	08 95       	ret

00001398 <can123_load_txbuff>:

void can1_load_txbuff(uint8_t channel, can_frame_t* frame){ can1_select(); can123_load_txbuff(channel, frame); can1_deselect(); }
void can2_load_txbuff(uint8_t channel, can_frame_t* frame){ can2_select(); can123_load_txbuff(channel, frame); can2_deselect(); }
void can3_load_txbuff(uint8_t channel, can_frame_t* frame){ can3_select(); can123_load_txbuff(channel, frame); can3_deselect(); }

void can123_load_txbuff(uint8_t channel, can_frame_t* frame){	
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	8b 01       	movw	r16, r22
    uint8_t tmp = 0;
	
	spi0_write(MCP_LOAD_BUF_TXB0SIDH + (channel * 2)); //set buffer
    13a0:	88 0f       	add	r24, r24
    13a2:	80 5c       	subi	r24, 0xC0	; 192
    13a4:	34 df       	rcall	.-408    	; 0x120e <spi0_write>
		spi0_write((uint8_t)(frame->can_id >> 8));	// send XXXnEID8
		spi0_write((uint8_t)(frame->can_id));		// send XXXnEID0
		} else {
	#endif
	
	spi0_write((uint8_t)(frame->can_id>>3));		// send XXXnSIDH
    13a6:	f8 01       	movw	r30, r16
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	96 95       	lsr	r25
    13ae:	87 95       	ror	r24
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	2a df       	rcall	.-428    	; 0x120e <spi0_write>
	tmp = ((uint8_t)(frame->can_id << 5) ) & 0xe0;
	tmp |= ((uint8_t)(frame->can_id << 2) ) & 0x03;
	spi0_write(tmp);				// send XXXnSIDL
    13ba:	f8 01       	movw	r30, r16
    13bc:	80 81       	ld	r24, Z
    13be:	82 95       	swap	r24
    13c0:	88 0f       	add	r24, r24
    13c2:	80 7e       	andi	r24, 0xE0	; 224
	spi0_write(0);					// send XXXnEID8
    13c4:	24 df       	rcall	.-440    	; 0x120e <spi0_write>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
	spi0_write(0);					// send XXXnEID0
    13c8:	22 df       	rcall	.-444    	; 0x120e <spi0_write>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
	
	#ifdef TC_CHARGER
		}
	#endif
	
    spi0_write(frame->can_dlc & 0x0f);
    13cc:	20 df       	rcall	.-448    	; 0x120e <spi0_write>
    13ce:	f8 01       	movw	r30, r16
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	8f 70       	andi	r24, 0x0F	; 15
    13d4:	1c df       	rcall	.-456    	; 0x120e <spi0_write>

    for(uint8_t i= 0; i<frame->can_dlc; i++){ spi0_write(frame->data[i]); }
    13d6:	f8 01       	movw	r30, r16
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	88 23       	and	r24, r24
    13dc:	59 f0       	breq	.+22     	; 0x13f4 <can123_load_txbuff+0x5c>
    13de:	c0 e0       	ldi	r28, 0x00	; 0
    13e0:	f8 01       	movw	r30, r16
    13e2:	ec 0f       	add	r30, r28
    13e4:	f1 1d       	adc	r31, r1
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	12 df       	rcall	.-476    	; 0x120e <spi0_write>
    13ea:	cf 5f       	subi	r28, 0xFF	; 255
    13ec:	f8 01       	movw	r30, r16
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	c8 17       	cp	r28, r24
    13f2:	b0 f3       	brcs	.-20     	; 0x13e0 <can123_load_txbuff+0x48>
}
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <can1_load_txbuff>:
    	case MCP_TX_1: spi0_write(MCP_RTS_TXB1); break;
    	case MCP_TX_2: spi0_write(MCP_RTS_TXB2); break;
    	default: return;
}	}

void can1_load_txbuff(uint8_t channel, can_frame_t* frame){ can1_select(); can123_load_txbuff(channel, frame); can1_deselect(); }
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	c0 e4       	ldi	r28, 0x40	; 64
    1404:	d6 e0       	ldi	r29, 0x06	; 6
    1406:	10 e1       	ldi	r17, 0x10	; 16
    1408:	1e 83       	std	Y+6, r17	; 0x06
    140a:	c6 df       	rcall	.-116    	; 0x1398 <can123_load_txbuff>
    140c:	1d 83       	std	Y+5, r17	; 0x05
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	08 95       	ret

00001416 <can2_load_txbuff>:
void can2_load_txbuff(uint8_t channel, can_frame_t* frame){ can2_select(); can123_load_txbuff(channel, frame); can2_deselect(); }
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	c0 e6       	ldi	r28, 0x60	; 96
    141e:	d6 e0       	ldi	r29, 0x06	; 6
    1420:	10 e1       	ldi	r17, 0x10	; 16
    1422:	1e 83       	std	Y+6, r17	; 0x06
    1424:	b9 df       	rcall	.-142    	; 0x1398 <can123_load_txbuff>
    1426:	1d 83       	std	Y+5, r17	; 0x05
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	08 95       	ret

00001430 <can3_load_txbuff>:
void can3_load_txbuff(uint8_t channel, can_frame_t* frame){ can3_select(); can123_load_txbuff(channel, frame); can3_deselect(); }
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	c0 e2       	ldi	r28, 0x20	; 32
    1438:	d6 e0       	ldi	r29, 0x06	; 6
    143a:	18 e0       	ldi	r17, 0x08	; 8
    143c:	1e 83       	std	Y+6, r17	; 0x06
    143e:	ac df       	rcall	.-168    	; 0x1398 <can123_load_txbuff>
    1440:	1d 83       	std	Y+5, r17	; 0x05
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	08 95       	ret

0000144a <can123_read_rx_buf>:
uint8_t can_read_rx_buf(uint8_t channel, can_frame_t* frame, uint8_t bus){uint8_t res = 0; if(bus == 1){res = can1_read_rx_buf(channel, frame);} if(bus == 2){res = can2_read_rx_buf(channel, frame);} if(bus == 3){res = can3_read_rx_buf(channel, frame);} return res;}
uint8_t can1_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can1_select(); res = can123_read_rx_buf(channel, frame); can1_deselect(); return res;}
uint8_t can2_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can2_select(); res = can123_read_rx_buf(channel, frame); can2_deselect(); return res;}
uint8_t can3_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can3_select(); res = can123_read_rx_buf(channel, frame); can3_deselect(); return res;}

uint8_t can123_read_rx_buf(uint8_t channel, can_frame_t* frame){
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	8b 01       	movw	r16, r22
	uint16_t id = 0;
	uint8_t data;
	
	spi0_write(channel);
    1454:	dc de       	rcall	.-584    	; 0x120e <spi0_write>
	
	data = spi0_write(0); // read XXXnSIDH
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	da de       	rcall	.-588    	; 0x120e <spi0_write>
	id = (((uint16_t)data) << 3);
    145a:	98 e0       	ldi	r25, 0x08	; 8
    145c:	89 9f       	mul	r24, r25
    145e:	e0 01       	movw	r28, r0

	data = spi0_write(0); // read XXXnSIDL
    1460:	11 24       	eor	r1, r1
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	d4 de       	rcall	.-600    	; 0x120e <spi0_write>
	id |= (((uint16_t)(data & 0xe0)) >> 5);
    1466:	82 95       	swap	r24
    1468:	86 95       	lsr	r24
    146a:	87 70       	andi	r24, 0x07	; 7

	spi0_write(0); // read XXXnEID8
    146c:	c8 2b       	or	r28, r24
    146e:	80 e0       	ldi	r24, 0x00	; 0
	spi0_write(0); // read XXXnEID0
    1470:	ce de       	rcall	.-612    	; 0x120e <spi0_write>
    1472:	80 e0       	ldi	r24, 0x00	; 0

    frame->can_id = id;
    1474:	cc de       	rcall	.-616    	; 0x120e <spi0_write>
    1476:	f8 01       	movw	r30, r16
    1478:	c0 83       	st	Z, r28
    frame->can_dlc = spi0_write(0); // read length of the frame
    147a:	d1 83       	std	Z+1, r29	; 0x01
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	c7 de       	rcall	.-626    	; 0x120e <spi0_write>
    frame->can_dlc &= 0x0f;	
    1480:	8f 70       	andi	r24, 0x0F	; 15
    1482:	f8 01       	movw	r30, r16

    for (uint8_t i=0; i<frame->can_dlc; i++){ frame->data[i] = spi0_write(0); }
    1484:	82 83       	std	Z+2, r24	; 0x02
    1486:	88 23       	and	r24, r24
    1488:	61 f0       	breq	.+24     	; 0x14a2 <can123_read_rx_buf+0x58>
    148a:	c0 e0       	ldi	r28, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	bf de       	rcall	.-642    	; 0x120e <spi0_write>
    1490:	f8 01       	movw	r30, r16
    1492:	ec 0f       	add	r30, r28
    1494:	f1 1d       	adc	r31, r1
    1496:	83 83       	std	Z+3, r24	; 0x03
    1498:	cf 5f       	subi	r28, 0xFF	; 255
    149a:	f8 01       	movw	r30, r16
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	c8 17       	cp	r28, r24
    14a0:	a8 f3       	brcs	.-22     	; 0x148c <can123_read_rx_buf+0x42>
	
    return 1;
}
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <can1_read_rx_buf>:
    for(uint8_t i= 0; i<frame->can_dlc; i++){ spi0_write(frame->data[i]); }
}

//Read rxbuffer to a frame
uint8_t can_read_rx_buf(uint8_t channel, can_frame_t* frame, uint8_t bus){uint8_t res = 0; if(bus == 1){res = can1_read_rx_buf(channel, frame);} if(bus == 2){res = can2_read_rx_buf(channel, frame);} if(bus == 3){res = can3_read_rx_buf(channel, frame);} return res;}
uint8_t can1_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can1_select(); res = can123_read_rx_buf(channel, frame); can1_deselect(); return res;}
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	c0 e4       	ldi	r28, 0x40	; 64
    14b6:	d6 e0       	ldi	r29, 0x06	; 6
    14b8:	10 e1       	ldi	r17, 0x10	; 16
    14ba:	1e 83       	std	Y+6, r17	; 0x06
    14bc:	c6 df       	rcall	.-116    	; 0x144a <can123_read_rx_buf>
    14be:	1d 83       	std	Y+5, r17	; 0x05
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	08 95       	ret

000014c8 <can2_read_rx_buf>:
uint8_t can2_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can2_select(); res = can123_read_rx_buf(channel, frame); can2_deselect(); return res;}
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	c0 e6       	ldi	r28, 0x60	; 96
    14d0:	d6 e0       	ldi	r29, 0x06	; 6
    14d2:	10 e1       	ldi	r17, 0x10	; 16
    14d4:	1e 83       	std	Y+6, r17	; 0x06
    14d6:	b9 df       	rcall	.-142    	; 0x144a <can123_read_rx_buf>
    14d8:	1d 83       	std	Y+5, r17	; 0x05
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	08 95       	ret

000014e2 <can3_read_rx_buf>:
uint8_t can3_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can3_select(); res = can123_read_rx_buf(channel, frame); can3_deselect(); return res;}
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	c0 e2       	ldi	r28, 0x20	; 32
    14ea:	d6 e0       	ldi	r29, 0x06	; 6
    14ec:	18 e0       	ldi	r17, 0x08	; 8
    14ee:	1e 83       	std	Y+6, r17	; 0x06
    14f0:	ac df       	rcall	.-168    	; 0x144a <can123_read_rx_buf>
    14f2:	1d 83       	std	Y+5, r17	; 0x05
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	08 95       	ret

000014fc <can_read_rx_buf>:

    for(uint8_t i= 0; i<frame->can_dlc; i++){ spi0_write(frame->data[i]); }
}

//Read rxbuffer to a frame
uint8_t can_read_rx_buf(uint8_t channel, can_frame_t* frame, uint8_t bus){uint8_t res = 0; if(bus == 1){res = can1_read_rx_buf(channel, frame);} if(bus == 2){res = can2_read_rx_buf(channel, frame);} if(bus == 3){res = can3_read_rx_buf(channel, frame);} return res;}
    14fc:	41 30       	cpi	r20, 0x01	; 1
    14fe:	11 f4       	brne	.+4      	; 0x1504 <can_read_rx_buf+0x8>
    1500:	d6 cf       	rjmp	.-84     	; 0x14ae <can1_read_rx_buf>
    1502:	08 95       	ret
    1504:	42 30       	cpi	r20, 0x02	; 2
    1506:	11 f4       	brne	.+4      	; 0x150c <can_read_rx_buf+0x10>
    1508:	df cf       	rjmp	.-66     	; 0x14c8 <can2_read_rx_buf>
    150a:	08 95       	ret
    150c:	43 30       	cpi	r20, 0x03	; 3
    150e:	11 f4       	brne	.+4      	; 0x1514 <can_read_rx_buf+0x18>
    1510:	e8 cf       	rjmp	.-48     	; 0x14e2 <can3_read_rx_buf>
    1512:	08 95       	ret
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	08 95       	ret

00001518 <can1_read>:
    return 1;
}

//read a register
uint8_t can_read(uint8_t reg, uint8_t bus){if(bus == 1){return can1_read(reg);} else if(bus == 2) {return can2_read(reg);} else {return can3_read(reg);}}
uint8_t can1_read(uint8_t reg){uint8_t res=0; can1_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can1_deselect(); return res;}
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	08 2f       	mov	r16, r24
    1522:	c0 e4       	ldi	r28, 0x40	; 64
    1524:	d6 e0       	ldi	r29, 0x06	; 6
    1526:	10 e1       	ldi	r17, 0x10	; 16
    1528:	1e 83       	std	Y+6, r17	; 0x06
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	70 de       	rcall	.-800    	; 0x120e <spi0_write>
    152e:	80 2f       	mov	r24, r16
    1530:	6e de       	rcall	.-804    	; 0x120e <spi0_write>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	6c de       	rcall	.-808    	; 0x120e <spi0_write>
    1536:	1d 83       	std	Y+5, r17	; 0x05
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <can2_read>:
uint8_t can2_read(uint8_t reg){uint8_t res=0; can2_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can2_deselect(); return res;}
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	08 2f       	mov	r16, r24
    154c:	c0 e6       	ldi	r28, 0x60	; 96
    154e:	d6 e0       	ldi	r29, 0x06	; 6
    1550:	10 e1       	ldi	r17, 0x10	; 16
    1552:	1e 83       	std	Y+6, r17	; 0x06
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	5b de       	rcall	.-842    	; 0x120e <spi0_write>
    1558:	80 2f       	mov	r24, r16
    155a:	59 de       	rcall	.-846    	; 0x120e <spi0_write>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	57 de       	rcall	.-850    	; 0x120e <spi0_write>
    1560:	1d 83       	std	Y+5, r17	; 0x05
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <can3_read>:
uint8_t can3_read(uint8_t reg){uint8_t res=0; can3_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can3_deselect(); return res;}
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	08 2f       	mov	r16, r24
    1576:	c0 e2       	ldi	r28, 0x20	; 32
    1578:	d6 e0       	ldi	r29, 0x06	; 6
    157a:	18 e0       	ldi	r17, 0x08	; 8
    157c:	1e 83       	std	Y+6, r17	; 0x06
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	46 de       	rcall	.-884    	; 0x120e <spi0_write>
    1582:	80 2f       	mov	r24, r16
    1584:	44 de       	rcall	.-888    	; 0x120e <spi0_write>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	42 de       	rcall	.-892    	; 0x120e <spi0_write>
    158a:	1d 83       	std	Y+5, r17	; 0x05
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	08 95       	ret

00001596 <can_read>:
	
    return 1;
}

//read a register
uint8_t can_read(uint8_t reg, uint8_t bus){if(bus == 1){return can1_read(reg);} else if(bus == 2) {return can2_read(reg);} else {return can3_read(reg);}}
    1596:	61 30       	cpi	r22, 0x01	; 1
    1598:	11 f4       	brne	.+4      	; 0x159e <can_read+0x8>
    159a:	be cf       	rjmp	.-132    	; 0x1518 <can1_read>
    159c:	08 95       	ret
    159e:	62 30       	cpi	r22, 0x02	; 2
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <can_read+0x10>
    15a2:	cf cf       	rjmp	.-98     	; 0x1542 <can2_read>
    15a4:	08 95       	ret
    15a6:	e2 cf       	rjmp	.-60     	; 0x156c <can3_read>
    15a8:	08 95       	ret

000015aa <can1_write>:
uint8_t can2_read(uint8_t reg){uint8_t res=0; can2_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can2_deselect(); return res;}
uint8_t can3_read(uint8_t reg){uint8_t res=0; can3_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can3_deselect(); return res;}

//write a register.
void can_write(uint8_t reg, uint8_t value, uint8_t bus){if(bus == 1){can1_write(reg, value);} else if(bus == 2){can2_write(reg, value);} else {can3_write(reg, value);}}
void can1_write(uint8_t reg, uint8_t value){can1_select(); spi0_write(MCP_WRITE);spi0_write(reg);spi0_write(value); can1_deselect();}
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	f8 2e       	mov	r15, r24
    15b6:	06 2f       	mov	r16, r22
    15b8:	c0 e4       	ldi	r28, 0x40	; 64
    15ba:	d6 e0       	ldi	r29, 0x06	; 6
    15bc:	10 e1       	ldi	r17, 0x10	; 16
    15be:	1e 83       	std	Y+6, r17	; 0x06
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	25 de       	rcall	.-950    	; 0x120e <spi0_write>
    15c4:	8f 2d       	mov	r24, r15
    15c6:	23 de       	rcall	.-954    	; 0x120e <spi0_write>
    15c8:	80 2f       	mov	r24, r16
    15ca:	21 de       	rcall	.-958    	; 0x120e <spi0_write>
    15cc:	1d 83       	std	Y+5, r17	; 0x05
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	08 95       	ret

000015da <can2_write>:
void can2_write(uint8_t reg, uint8_t value){can2_select(); spi0_write(MCP_WRITE);spi0_write(reg);spi0_write(value); can2_deselect();}
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	f8 2e       	mov	r15, r24
    15e6:	06 2f       	mov	r16, r22
    15e8:	c0 e6       	ldi	r28, 0x60	; 96
    15ea:	d6 e0       	ldi	r29, 0x06	; 6
    15ec:	10 e1       	ldi	r17, 0x10	; 16
    15ee:	1e 83       	std	Y+6, r17	; 0x06
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	0d de       	rcall	.-998    	; 0x120e <spi0_write>
    15f4:	8f 2d       	mov	r24, r15
    15f6:	0b de       	rcall	.-1002   	; 0x120e <spi0_write>
    15f8:	80 2f       	mov	r24, r16
    15fa:	09 de       	rcall	.-1006   	; 0x120e <spi0_write>
    15fc:	1d 83       	std	Y+5, r17	; 0x05
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	08 95       	ret

0000160a <can3_write>:
void can3_write(uint8_t reg, uint8_t value){can3_select(); spi0_write(MCP_WRITE);spi0_write(reg);spi0_write(value); can3_deselect();}
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	f8 2e       	mov	r15, r24
    1616:	06 2f       	mov	r16, r22
    1618:	c0 e2       	ldi	r28, 0x20	; 32
    161a:	d6 e0       	ldi	r29, 0x06	; 6
    161c:	18 e0       	ldi	r17, 0x08	; 8
    161e:	1e 83       	std	Y+6, r17	; 0x06
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	f5 dd       	rcall	.-1046   	; 0x120e <spi0_write>
    1624:	8f 2d       	mov	r24, r15
    1626:	f3 dd       	rcall	.-1050   	; 0x120e <spi0_write>
    1628:	80 2f       	mov	r24, r16
    162a:	f1 dd       	rcall	.-1054   	; 0x120e <spi0_write>
    162c:	1d 83       	std	Y+5, r17	; 0x05
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	08 95       	ret

0000163a <can_init>:
#define can3_select()			CAN3_CS_PORT.OUTCLR = CAN3_CS
#define can1_deselect()			CAN1_CS_PORT.OUTSET = CAN1_CS
#define can2_deselect()			CAN2_CS_PORT.OUTSET = CAN2_CS
#define can3_deselect()			CAN3_CS_PORT.OUTSET = CAN3_CS

uint8_t can_init(uint8_t opmod, uint8_t reset){
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
	uint8_t mode1, mode2, mode3;
	
	SPI0_PORT.DIRSET		= SPI0_SCK | SPI0_MOSI;
    1640:	e0 e4       	ldi	r30, 0x40	; 64
    1642:	f6 e0       	ldi	r31, 0x06	; 6
    1644:	90 ea       	ldi	r25, 0xA0	; 160
    1646:	91 83       	std	Z+1, r25	; 0x01
	SPI0_PORT.DIRCLR		= SPI0_MISO;
    1648:	90 e4       	ldi	r25, 0x40	; 64
    164a:	92 83       	std	Z+2, r25	; 0x02
	CAN1_PORT.DIRSET		= CAN1_STBY;
    164c:	a0 e6       	ldi	r26, 0x60	; 96
    164e:	b6 e0       	ldi	r27, 0x06	; 6
    1650:	92 e0       	ldi	r25, 0x02	; 2
    1652:	11 96       	adiw	r26, 0x01	; 1
    1654:	9c 93       	st	X, r25
    1656:	11 97       	sbiw	r26, 0x01	; 1
	CAN2_PORT.DIRSET		= CAN2_STBY;
    1658:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	CAN3_PORT.DIRSET		= CAN3_STBY;
    165c:	98 e0       	ldi	r25, 0x08	; 8
    165e:	91 83       	std	Z+1, r25	; 0x01
	CAN1_CS_PORT.DIRSET		= CAN1_CS;
    1660:	20 e1       	ldi	r18, 0x10	; 16
    1662:	21 83       	std	Z+1, r18	; 0x01
	CAN2_CS_PORT.DIRSET		= CAN2_CS;
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	2c 93       	st	X, r18
	CAN3_CS_PORT.DIRSET		= CAN3_CS;
    1668:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	SPI0.CTRL				= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm |	//enable SPI SPI_CLK2X_bm |
    166c:	90 ed       	ldi	r25, 0xD0	; 208
    166e:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
							  SPI_PRESCALER_DIV4_gc;							//run faster than usual (clkperx2/4=24MHz)
	
	if(!reset) return 1;
    1672:	66 23       	and	r22, r22
    1674:	09 f4       	brne	.+2      	; 0x1678 <can_init+0x3e>
    1676:	7e c0       	rjmp	.+252    	; 0x1774 <can_init+0x13a>
    1678:	c8 2f       	mov	r28, r24
	
	can1_deselect();
    167a:	80 e1       	ldi	r24, 0x10	; 16
    167c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	can2_deselect();
    1680:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	can3_deselect();
    1684:	88 e0       	ldi	r24, 0x08	; 8
    1686:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    168a:	8f e1       	ldi	r24, 0x1F	; 31
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <can_init+0x54>
    1692:	00 c0       	rjmp	.+0      	; 0x1694 <can_init+0x5a>
    1694:	00 00       	nop
	
	_delay_ms(0.1);
	
	can1_reset();
    1696:	c6 dd       	rcall	.-1140   	; 0x1224 <can1_reset>
	can2_reset();
    1698:	d3 dd       	rcall	.-1114   	; 0x1240 <can2_reset>
	can3_reset();
    169a:	e0 dd       	rcall	.-1088   	; 0x125c <can3_reset>
    169c:	8f e3       	ldi	r24, 0x3F	; 63
    169e:	9f e1       	ldi	r25, 0x1F	; 31
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <can_init+0x66>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <can_init+0x6c>
    16a6:	00 00       	nop
	
	_delay_ms(1);												//wait for MCP25625 to be ready
	
	mode1 = can1_read(MCP_REG_CANCTRL);							//read opmode
    16a8:	8f e0       	ldi	r24, 0x0F	; 15
    16aa:	36 df       	rcall	.-404    	; 0x1518 <can1_read>
    16ac:	d8 2f       	mov	r29, r24
	mode1 = (mode1 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits	
	
	mode2 = can2_read(MCP_REG_CANCTRL);							//read opmode
    16ae:	8f e0       	ldi	r24, 0x0F	; 15
    16b0:	48 df       	rcall	.-368    	; 0x1542 <can2_read>
    16b2:	18 2f       	mov	r17, r24
	mode2 = (mode2 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits	

	mode3 = can3_read(MCP_REG_CANCTRL);							//read opmode
    16b4:	8f e0       	ldi	r24, 0x0F	; 15
    16b6:	5a df       	rcall	.-332    	; 0x156c <can3_read>
    16b8:	d2 95       	swap	r29
	mode3 = (mode3 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits
	
	if(mode1 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
    16ba:	d6 95       	lsr	r29
    16bc:	d7 70       	andi	r29, 0x07	; 7
    16be:	d4 30       	cpi	r29, 0x04	; 4
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <can_init+0x8a>
    16c2:	5a c0       	rjmp	.+180    	; 0x1778 <can_init+0x13e>
    16c4:	12 95       	swap	r17
	if(mode2 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
    16c6:	16 95       	lsr	r17
    16c8:	17 70       	andi	r17, 0x07	; 7
    16ca:	14 30       	cpi	r17, 0x04	; 4
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <can_init+0x96>
    16ce:	56 c0       	rjmp	.+172    	; 0x177c <can_init+0x142>
    16d0:	82 95       	swap	r24
	if(mode3 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
    16d2:	86 95       	lsr	r24
    16d4:	87 70       	andi	r24, 0x07	; 7
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	09 f0       	breq	.+2      	; 0x16dc <can_init+0xa2>
    16da:	52 c0       	rjmp	.+164    	; 0x1780 <can_init+0x146>
    16dc:	8f e1       	ldi	r24, 0x1F	; 31
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <can_init+0xa6>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <can_init+0xac>
    16e6:	00 00       	nop
	can1_write(MCP_REG_CNF2,0xF0);								//PHSEG1 is 7xTq, PRSEG = 1xTq, SAM=1
	can2_write(MCP_REG_CNF2,0xF0);
	can1_write(MCP_REG_CNF3,0x06);								//PHSEG2 is 7xTq, so total is (7+7+1+1)=16Tq
	can2_write(MCP_REG_CNF3,0x06);
	#else
	can1_write(MCP_REG_CNF1,0b00000000);						//set BRP to 0 so we get Tq = 1/8M, then we need 16xTq to get 500kHz, SJW=1
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	8a e2       	ldi	r24, 0x2A	; 42
    16ec:	5e df       	rcall	.-324    	; 0x15aa <can1_write>
	can2_write(MCP_REG_CNF1,0b00000000);
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	8a e2       	ldi	r24, 0x2A	; 42
    16f2:	73 df       	rcall	.-282    	; 0x15da <can2_write>
	can3_write(MCP_REG_CNF1,0b00000000);
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	8a e2       	ldi	r24, 0x2A	; 42
    16f8:	88 df       	rcall	.-240    	; 0x160a <can3_write>
	can1_write(MCP_REG_CNF2,0b11100111);						//PHSEG1 is 5xTq, PRSEG = 8xTq, SAM=1
    16fa:	67 ee       	ldi	r22, 0xE7	; 231
    16fc:	89 e2       	ldi	r24, 0x29	; 41
    16fe:	55 df       	rcall	.-342    	; 0x15aa <can1_write>
	can2_write(MCP_REG_CNF2,0b11100111);
    1700:	67 ee       	ldi	r22, 0xE7	; 231
    1702:	89 e2       	ldi	r24, 0x29	; 41
    1704:	6a df       	rcall	.-300    	; 0x15da <can2_write>
	can3_write(MCP_REG_CNF2,0b11100111);
    1706:	67 ee       	ldi	r22, 0xE7	; 231
    1708:	89 e2       	ldi	r24, 0x29	; 41
    170a:	7f df       	rcall	.-258    	; 0x160a <can3_write>
	can1_write(MCP_REG_CNF3,0b00000001);						//PHSEG2 is 2xTq, so total is (5+5+5+1)=16Tq
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	88 e2       	ldi	r24, 0x28	; 40
    1710:	4c df       	rcall	.-360    	; 0x15aa <can1_write>
	can2_write(MCP_REG_CNF3,0b00000001);
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	88 e2       	ldi	r24, 0x28	; 40
    1716:	61 df       	rcall	.-318    	; 0x15da <can2_write>
	can3_write(MCP_REG_CNF3,0b00000001);
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	88 e2       	ldi	r24, 0x28	; 40
    171c:	76 df       	rcall	.-276    	; 0x160a <can3_write>

	
	//we leave RXM to 0 and set acceptance filters to 0 to avoid bogus data from error frames
	//ending up in the data stream

	can1_bit_modify(MCP_REG_RXB0CTRL, MCP_RXB_BUKT_MASK, MCP_RXB_BUKT_MASK);//configure message rollover
    171e:	44 e0       	ldi	r20, 0x04	; 4
    1720:	64 e0       	ldi	r22, 0x04	; 4
    1722:	80 e6       	ldi	r24, 0x60	; 96
    1724:	dc dd       	rcall	.-1096   	; 0x12de <can1_bit_modify>
	can2_bit_modify(MCP_REG_RXB0CTRL, MCP_RXB_BUKT_MASK, MCP_RXB_BUKT_MASK);
    1726:	44 e0       	ldi	r20, 0x04	; 4
    1728:	64 e0       	ldi	r22, 0x04	; 4
    172a:	80 e6       	ldi	r24, 0x60	; 96
    172c:	e5 dd       	rcall	.-1078   	; 0x12f8 <can2_bit_modify>
	can3_bit_modify(MCP_REG_RXB0CTRL, MCP_RXB_BUKT_MASK, MCP_RXB_BUKT_MASK);
    172e:	44 e0       	ldi	r20, 0x04	; 4
    1730:	64 e0       	ldi	r22, 0x04	; 4
    1732:	80 e6       	ldi	r24, 0x60	; 96
    1734:	ee dd       	rcall	.-1060   	; 0x1312 <can3_bit_modify>
	can1_write(MCP_REG_CANINTE, 0xA3);							//enable both RX interrupts and the error interrupt
    1736:	63 ea       	ldi	r22, 0xA3	; 163
    1738:	8b e2       	ldi	r24, 0x2B	; 43
    173a:	37 df       	rcall	.-402    	; 0x15aa <can1_write>
	can2_write(MCP_REG_CANINTE, 0xA3);
    173c:	63 ea       	ldi	r22, 0xA3	; 163
    173e:	8b e2       	ldi	r24, 0x2B	; 43
    1740:	4c df       	rcall	.-360    	; 0x15da <can2_write>
    1742:	63 ea       	ldi	r22, 0xA3	; 163
	can3_write(MCP_REG_CANINTE, 0xA3);
    1744:	8b e2       	ldi	r24, 0x2B	; 43
    1746:	61 df       	rcall	.-318    	; 0x160a <can3_write>
    1748:	4c 2f       	mov	r20, r28
    174a:	60 ee       	ldi	r22, 0xE0	; 224
	can1_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);	//Set device mode per argument
    174c:	8f e0       	ldi	r24, 0x0F	; 15
    174e:	c7 dd       	rcall	.-1138   	; 0x12de <can1_bit_modify>
    1750:	4c 2f       	mov	r20, r28
    1752:	60 ee       	ldi	r22, 0xE0	; 224
    1754:	8f e0       	ldi	r24, 0x0F	; 15
	can2_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);
    1756:	d0 dd       	rcall	.-1120   	; 0x12f8 <can2_bit_modify>
    1758:	4c 2f       	mov	r20, r28
    175a:	60 ee       	ldi	r22, 0xE0	; 224
    175c:	8f e0       	ldi	r24, 0x0F	; 15
    175e:	d9 dd       	rcall	.-1102   	; 0x1312 <can3_bit_modify>
	can3_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    1766:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	can1_unstandby();											//set to active	
    176a:	88 e0       	ldi	r24, 0x08	; 8
    176c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	can2_unstandby();
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <can_init+0x148>
	can3_unstandby();
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <can_init+0x148>
    1778:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <can_init+0x148>
    177c:	80 e0       	ldi	r24, 0x00	; 0
	CAN2_CS_PORT.DIRSET		= CAN2_CS;
	CAN3_CS_PORT.DIRSET		= CAN3_CS;
	SPI0.CTRL				= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm |	//enable SPI SPI_CLK2X_bm |
							  SPI_PRESCALER_DIV4_gc;							//run faster than usual (clkperx2/4=24MHz)
	
	if(!reset) return 1;
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <can_init+0x148>
    1780:	80 e0       	ldi	r24, 0x00	; 0
	mode2 = (mode2 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits	

	mode3 = can3_read(MCP_REG_CANCTRL);							//read opmode
	mode3 = (mode3 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits
	
	if(mode1 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
	if(mode2 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
    1786:	1f 91       	pop	r17
    1788:	08 95       	ret

0000178a <can_write>:
	if(mode3 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
    178a:	41 30       	cpi	r20, 0x01	; 1
	can3_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);
	can1_unstandby();											//set to active	
	can2_unstandby();
	can3_unstandby();
	return 1;
}
    178c:	11 f4       	brne	.+4      	; 0x1792 <can_write+0x8>
    178e:	0d cf       	rjmp	.-486    	; 0x15aa <can1_write>
    1790:	08 95       	ret
    1792:	42 30       	cpi	r20, 0x02	; 2
uint8_t can1_read(uint8_t reg){uint8_t res=0; can1_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can1_deselect(); return res;}
uint8_t can2_read(uint8_t reg){uint8_t res=0; can2_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can2_deselect(); return res;}
uint8_t can3_read(uint8_t reg){uint8_t res=0; can3_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can3_deselect(); return res;}

//write a register.
void can_write(uint8_t reg, uint8_t value, uint8_t bus){if(bus == 1){can1_write(reg, value);} else if(bus == 2){can2_write(reg, value);} else {can3_write(reg, value);}}
    1794:	11 f4       	brne	.+4      	; 0x179a <can_write+0x10>
    1796:	21 cf       	rjmp	.-446    	; 0x15da <can2_write>
    1798:	08 95       	ret
    179a:	37 cf       	rjmp	.-402    	; 0x160a <can3_write>
    179c:	08 95       	ret

0000179e <hw_init>:

can_frame_t tx3_buffer[5];
uint8_t		tx3_buffer_pos		= 0;
uint8_t		tx3_buffer_end		= 0;

void hw_init(void){
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
    17a6:	e0 e5       	ldi	r30, 0x50	; 80
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    17b0:	81 81       	ldd	r24, Z+1	; 0x01
    17b2:	81 ff       	sbrs	r24, 1
    17b4:	fd cf       	rjmp	.-6      	; 0x17b0 <hw_init+0x12>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
    17b6:	a0 e5       	ldi	r26, 0x50	; 80
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	16 96       	adiw	r26, 0x06	; 6
    17bc:	8c 91       	ld	r24, X
    17be:	16 97       	sbiw	r26, 0x06	; 6
    17c0:	84 60       	ori	r24, 0x04	; 4
    17c2:	16 96       	adiw	r26, 0x06	; 6
    17c4:	8c 93       	st	X, r24
    17c6:	16 97       	sbiw	r26, 0x06	; 6
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
    17c8:	c0 e6       	ldi	r28, 0x60	; 96
    17ca:	d0 e0       	ldi	r29, 0x00	; 0
    17cc:	80 e8       	ldi	r24, 0x80	; 128
    17ce:	8d 83       	std	Y+5, r24	; 0x05
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
    17d0:	8b eb       	ldi	r24, 0xBB	; 187
    17d2:	8e 83       	std	Y+6, r24	; 0x06

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
    17d4:	80 ec       	ldi	r24, 0xC0	; 192
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	22 e0       	ldi	r18, 0x02	; 2
    17da:	fc 01       	movw	r30, r24
    17dc:	22 87       	std	Z+10, r18	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
    17de:	ed e1       	ldi	r30, 0x1D	; 29
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	e4 91       	lpm	r30, Z
    17e4:	ea 83       	std	Y+2, r30	; 0x02
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
    17e6:	ec e1       	ldi	r30, 0x1C	; 28
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	e4 91       	lpm	r30, Z
    17ec:	eb 83       	std	Y+3, r30	; 0x03
							NVM.CMD        = 0;
    17ee:	fc 01       	movw	r30, r24
    17f0:	12 86       	std	Z+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	88 83       	st	Y, r24
	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, 48000000);		
	
	//turn off everything we don' t use
	PR.PRGEN		= PR_AES_bm | PR_RTC_bm | PR_DMA_bm;
    17f6:	e0 e7       	ldi	r30, 0x70	; 112
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	85 e1       	ldi	r24, 0x15	; 21
    17fc:	80 83       	st	Z, r24
	PR.PRPA			= PR_ADC_bm | PR_AC_bm;
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	81 83       	std	Z+1, r24	; 0x01
	PR.PRPC			= PR_TWI_bm | PR_USART0_bm | PR_HIRES_bm;
    1802:	94 e5       	ldi	r25, 0x54	; 84
    1804:	93 83       	std	Z+3, r25	; 0x03
	PR.PRPD			= PR_TWI_bm | PR_USART0_bm | PR_TC0_bm | PR_TC1_bm;
    1806:	93 e5       	ldi	r25, 0x53	; 83
    1808:	94 83       	std	Z+4, r25	; 0x04
	PR.PRPE			= PR_TWI_bm | PR_USART0_bm;
    180a:	90 e5       	ldi	r25, 0x50	; 80
    180c:	95 83       	std	Z+5, r25	; 0x05
	
	//blink output
	PORTB.DIRSET	= 3;
    180e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	
	//start 16MHz crystal and PLL it up to 48MHz
	OSC.XOSCCTRL	= OSC_FRQRANGE_12TO16_gc |		//16MHz crystal
    1812:	8b ec       	ldi	r24, 0xCB	; 203
    1814:	12 96       	adiw	r26, 0x02	; 2
    1816:	8c 93       	st	X, r24
    1818:	12 97       	sbiw	r26, 0x02	; 2
	OSC_XOSCSEL_XTAL_16KCLK_gc;						//16kclk startup
	OSC.CTRL	   |= OSC_XOSCEN_bm;				//enable crystal
    181a:	8c 91       	ld	r24, X
    181c:	88 60       	ori	r24, 0x08	; 8
    181e:	8c 93       	st	X, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));			//wait until ready
    1820:	e0 e5       	ldi	r30, 0x50	; 80
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	83 ff       	sbrs	r24, 3
    1828:	fd cf       	rjmp	.-6      	; 0x1824 <hw_init+0x86>
	OSC.PLLCTRL		= OSC_PLLSRC_XOSC_gc | 2;		//XTAL->PLL, 2x multiplier (32MHz)
    182a:	e0 e5       	ldi	r30, 0x50	; 80
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	82 ec       	ldi	r24, 0xC2	; 194
    1830:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL	   |= OSC_PLLEN_bm;					//start PLL
    1832:	80 81       	ld	r24, Z
    1834:	80 61       	ori	r24, 0x10	; 16
    1836:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_PLLRDY_bm));			//wait until ready
    1838:	81 81       	ldd	r24, Z+1	; 0x01
    183a:	84 ff       	sbrs	r24, 4
    183c:	fd cf       	rjmp	.-6      	; 0x1838 <hw_init+0x9a>
	CCP				= CCP_IOREG_gc;					//allow changing CLK.CTRL
    183e:	88 ed       	ldi	r24, 0xD8	; 216
    1840:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL		= CLK_SCLKSEL_PLL_gc;			//use PLL output as system clock	
    1842:	34 e0       	ldi	r19, 0x04	; 4
    1844:	30 93 40 00 	sts	0x0040, r19	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	//output 16MHz clock to MCP25625 chips (PE0)
	//next iteration: put this on some other port, pin 4 or 7, so we can use the event system
	TCE0.CTRLA		= TC0_CLKSEL_DIV1_gc;						//clkper/1
    1848:	e0 e0       	ldi	r30, 0x00	; 0
    184a:	fa e0       	ldi	r31, 0x0A	; 10
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 83       	st	Z, r24
	TCE0.CTRLB		= TC0_CCAEN_bm | TC0_WGMODE_SINGLESLOPE_bm;	//enable CCA, single-slope PWM
    1850:	93 e1       	ldi	r25, 0x13	; 19
    1852:	91 83       	std	Z+1, r25	; 0x01
	TCE0.CCA		= 1;										//compare value
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	40 a7       	std	Z+40, r20	; 0x28
    185a:	51 a7       	std	Z+41, r21	; 0x29
	TCE0.PER		= 1;										//period of 1, generates 24MHz output
    185c:	46 a3       	std	Z+38, r20	; 0x26
    185e:	57 a3       	std	Z+39, r21	; 0x27
	
	PORTE.DIRSET	= PIN0_bm;									//set CLKOUT pin to output
    1860:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	
	//setup CAN pin interrupts
	PORTC.INTCTRL	= PORT_INT0LVL_HI_gc;
    1864:	a0 e4       	ldi	r26, 0x40	; 64
    1866:	b6 e0       	ldi	r27, 0x06	; 6
    1868:	93 e0       	ldi	r25, 0x03	; 3
    186a:	19 96       	adiw	r26, 0x09	; 9
    186c:	9c 93       	st	X, r25
    186e:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTCTRL	= PORT_INT0LVL_HI_gc | PORT_INT1LVL_HI_gc;	
    1870:	e0 e6       	ldi	r30, 0x60	; 96
    1872:	f6 e0       	ldi	r31, 0x06	; 6
    1874:	2f e0       	ldi	r18, 0x0F	; 15
    1876:	21 87       	std	Z+9, r18	; 0x09
	
	PORTD.INT0MASK	= PIN0_bm;						//PORTD0 has can1 interrupt
    1878:	82 87       	std	Z+10, r24	; 0x0a
	PORTD.PIN0CTRL	= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
    187a:	2b e1       	ldi	r18, 0x1B	; 27
    187c:	20 8b       	std	Z+16, r18	; 0x10
	
	PORTD.INT1MASK	= PIN5_bm;						//PORTD5 has can2 interrupt
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	43 87       	std	Z+11, r20	; 0x0b
	PORTD.PIN5CTRL	= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
    1882:	25 8b       	std	Z+21, r18	; 0x15
	
	#ifndef DISABLE_CAN3
	PORTC.INT0MASK	= PIN2_bm;						//PORTC2 has can3 interrupt
    1884:	1a 96       	adiw	r26, 0x0a	; 10
    1886:	3c 93       	st	X, r19
    1888:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTC.PIN0CTRL	= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
    188a:	50 96       	adiw	r26, 0x10	; 16
    188c:	2c 93       	st	X, r18
	#endif
	
	//buffer checking interrupt
	TCC1.CTRLA		= TC0_CLKSEL_DIV1_gc;			//48M/1/4800 ~ 100usec
    188e:	e0 e4       	ldi	r30, 0x40	; 64
    1890:	f8 e0       	ldi	r31, 0x08	; 8
    1892:	80 83       	st	Z, r24
	TCC1.PER		= 4800;
    1894:	20 ec       	ldi	r18, 0xC0	; 192
    1896:	32 e1       	ldi	r19, 0x12	; 18
    1898:	26 a3       	std	Z+38, r18	; 0x26
    189a:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.INTCTRLA	= TC0_OVFINTLVL_HI_gc;			//same priority as can interrupts
    189c:	96 83       	std	Z+6, r25	; 0x06
	
	//we want to optimize performance, so we're going to time stuff
	//48MHz/48=1us timer, which we just freerun and reset whenever we want to start timing something
	//frame time timer
	TCC0.CTRLA		= TC0_CLKSEL_DIV1_gc;
    189e:	e0 e0       	ldi	r30, 0x00	; 0
    18a0:	f8 e0       	ldi	r31, 0x08	; 8
    18a2:	80 83       	st	Z, r24
	TCC0.PER		= 48000;						//48MHz/48000=1ms
    18a4:	20 e8       	ldi	r18, 0x80	; 128
    18a6:	3b eb       	ldi	r19, 0xBB	; 187
    18a8:	26 a3       	std	Z+38, r18	; 0x26
    18aa:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA	= TC0_OVFINTLVL_HI_gc;			//interrupt on overflow
    18ac:	96 83       	std	Z+6, r25	; 0x06
	
	PORTB.OUTCLR	= (1 << 0);
    18ae:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
	
	can_system_init:
			
	//Init SPI and CAN interface:
	if(RST.STATUS & RST_WDRF_bm){ //if we come from a watchdog reset, we don't need to setup CAN
    18b2:	08 e7       	ldi	r16, 0x78	; 120
    18b4:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	if(caninit){		
		PORTB.OUTSET |= (1 << 0);					//green LED
	} else {		
		PORTB.OUTSET |= (1 << 1);					//red LED
    18b6:	c0 e2       	ldi	r28, 0x20	; 32
    18b8:	d6 e0       	ldi	r29, 0x06	; 6
	PORTB.OUTCLR	= (1 << 0);
	
	can_system_init:
			
	//Init SPI and CAN interface:
	if(RST.STATUS & RST_WDRF_bm){ //if we come from a watchdog reset, we don't need to setup CAN
    18ba:	f8 01       	movw	r30, r16
    18bc:	80 81       	ld	r24, Z
    18be:	83 ff       	sbrs	r24, 3
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <hw_init+0x12c>
		caninit = can_init(MCP_OPMOD_NORMAL, 1); //on second thought, we do
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	b9 de       	rcall	.-654    	; 0x163a <can_init>
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <hw_init+0x132>
	} else {
		caninit = can_init(MCP_OPMOD_NORMAL, 1);
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	b5 de       	rcall	.-662    	; 0x163a <can_init>
	}
	
	if(caninit){		
    18d0:	88 23       	and	r24, r24
    18d2:	29 f1       	breq	.+74     	; 0x191e <hw_init+0x180>
		PORTB.OUTSET |= (1 << 0);					//green LED
    18d4:	e0 e2       	ldi	r30, 0x20	; 32
    18d6:	f6 e0       	ldi	r31, 0x06	; 6
    18d8:	85 81       	ldd	r24, Z+5	; 0x05
    18da:	81 60       	ori	r24, 0x01	; 1
    18dc:	85 83       	std	Z+5, r24	; 0x05
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
    18de:	25 e8       	ldi	r18, 0x85	; 133
    18e0:	88 ed       	ldi	r24, 0xD8	; 216
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a2 ea       	ldi	r26, 0xA2	; 162
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	1b be       	out	0x3b, r1	; 59
    18ea:	fd 01       	movw	r30, r26
    18ec:	84 bf       	out	0x34, r24	; 52
    18ee:	20 83       	st	Z, r18
	}
	
	//Set and enable interrupts with round-robin
	XMEGACLK_CCP_Write((void * ) &PMIC.CTRL, PMIC_RREN_bm | PMIC_LOLVLEN_bm | PMIC_HILVLEN_bm);//PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm| PMIC_HILVLEN_bm;
	
	USB_Init(USB_OPT_RC32MCLKSRC | USB_OPT_BUSEVENT_PRILOW);
    18f0:	2b be       	out	0x3b, r2	; 59
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	d9 db       	rcall	.-2126   	; 0x10a8 <USB_Init>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    18f6:	63 e1       	ldi	r22, 0x13	; 19
    18f8:	72 e2       	ldi	r23, 0x22	; 34
    18fa:	85 e0       	ldi	r24, 0x05	; 5
    18fc:	91 e2       	ldi	r25, 0x21	; 33
    18fe:	0e 94 5f 03 	call	0x6be	; 0x6be <CDC_Device_CreateStream>
	
	wdt_enable(WDTO_15MS);
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	88 ed       	ldi	r24, 0xD8	; 216
    1906:	08 b6       	in	r0, 0x38	; 56
    1908:	18 be       	out	0x38, r1	; 56
    190a:	84 bf       	out	0x34, r24	; 52
    190c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1910:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1914:	81 fd       	sbrc	r24, 1
    1916:	fc cf       	rjmp	.-8      	; 0x1910 <hw_init+0x172>
    1918:	08 be       	out	0x38, r0	; 56
	
	sei();
    191a:	78 94       	sei
}
    191c:	0d c0       	rjmp	.+26     	; 0x1938 <hw_init+0x19a>
	}
	
	if(caninit){		
		PORTB.OUTSET |= (1 << 0);					//green LED
	} else {		
		PORTB.OUTSET |= (1 << 1);					//red LED
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	82 60       	ori	r24, 0x02	; 2
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	ff ef       	ldi	r31, 0xFF	; 255
    1926:	29 ef       	ldi	r18, 0xF9	; 249
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	f1 50       	subi	r31, 0x01	; 1
    192c:	20 40       	sbci	r18, 0x00	; 0
    192e:	80 40       	sbci	r24, 0x00	; 0
    1930:	e1 f7       	brne	.-8      	; 0x192a <hw_init+0x18c>
    1932:	00 c0       	rjmp	.+0      	; 0x1934 <hw_init+0x196>
    1934:	00 00       	nop
    1936:	c1 cf       	rjmp	.-126    	; 0x18ba <hw_init+0x11c>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
	
	wdt_enable(WDTO_15MS);
	
	sei();
}
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	08 95       	ret

00001942 <EVENT_USB_Device_Disconnect>:
		}
	}
}

// Event handler for the LUFA library USB Disconnection event.
void EVENT_USB_Device_Disconnect(void){}
    1942:	08 95       	ret

00001944 <EVENT_USB_Device_Connect>:

void EVENT_USB_Device_Connect(void){}
    1944:	08 95       	ret

00001946 <EVENT_USB_Device_ConfigurationChanged>:

// Event handler for the LUFA library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void){ configSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface); }
    1946:	85 e0       	ldi	r24, 0x05	; 5
    1948:	91 e2       	ldi	r25, 0x21	; 33
    194a:	0e 94 2d 02 	call	0x45a	; 0x45a <CDC_Device_ConfigureEndpoints>
    194e:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <configSuccess>
    1952:	89 23       	and	r24, r25
    1954:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <configSuccess>
    1958:	08 95       	ret

0000195a <EVENT_USB_Device_ControlRequest>:

// Event handler for the LUFA library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void){	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface); }
    195a:	85 e0       	ldi	r24, 0x05	; 5
    195c:	91 e2       	ldi	r25, 0x21	; 33
    195e:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <CDC_Device_ProcessControlRequest>
    1962:	08 95       	ret

00001964 <print>:

//appends string to ring buffer and initiates transmission
void print(char * str, uint8_t len){
    1964:	cf 93       	push	r28
    1966:	c6 2f       	mov	r28, r22
	if((print_char_limit + len) <= 120){
    1968:	40 91 11 22 	lds	r20, 0x2211	; 0x802211 <print_char_limit>
    196c:	26 2f       	mov	r18, r22
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	24 0f       	add	r18, r20
    1972:	31 1d       	adc	r19, r1
    1974:	29 37       	cpi	r18, 0x79	; 121
    1976:	31 05       	cpc	r19, r1
    1978:	64 f4       	brge	.+24     	; 0x1992 <print+0x2e>
		fwrite(str, len, 1, &USBSerialStream);
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	23 e1       	ldi	r18, 0x13	; 19
    197e:	32 e2       	ldi	r19, 0x22	; 34
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	72 d3       	rcall	.+1764   	; 0x206a <fwrite>
		print_char_limit += len;
    1986:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <print_char_limit>
    198a:	c8 0f       	add	r28, r24
    198c:	c0 93 11 22 	sts	0x2211, r28	; 0x802211 <print_char_limit>
    1990:	09 c0       	rjmp	.+18     	; 0x19a4 <print+0x40>
	} else { //if the buffer is full, show that by sending an X (happens on very busy CAN buses)
		fwrite("X\n",2,1,&USBSerialStream);
    1992:	23 e1       	ldi	r18, 0x13	; 19
    1994:	32 e2       	ldi	r19, 0x22	; 34
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	62 e0       	ldi	r22, 0x02	; 2
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	8b ea       	ldi	r24, 0xAB	; 171
    19a0:	91 e2       	ldi	r25, 0x21	; 33
    19a2:	63 d3       	rcall	.+1734   	; 0x206a <fwrite>
	}
}
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <main>:
}


int main(void){
	char * str = "";
	hw_init();
    19a8:	fa de       	rcall	.-524    	; 0x179e <hw_init>

    while(1){
		if(!output_can_to_serial){
    19aa:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <output_can_to_serial>
    19ae:	81 11       	cpse	r24, r1
    19b0:	fc cf       	rjmp	.-8      	; 0x19aa <main+0x2>
			if(sec_interrupt){
    19b2:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <sec_interrupt>
    19b6:	88 23       	and	r24, r24
    19b8:	c1 f3       	breq	.-16     	; 0x19aa <main+0x2>
				sec_interrupt = 0;
    19ba:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <sec_interrupt>
				
				//sample text output every second
				str = "ms 0000\n";
				int_to_4digit_nodec(ms_timer, (char *) (str + 3));
    19be:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <ms_timer>
    19c2:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <ms_timer+0x1>
    19c6:	61 eb       	ldi	r22, 0xB1	; 177
    19c8:	71 e2       	ldi	r23, 0x21	; 33
    19ca:	0e 94 03 02 	call	0x406	; 0x406 <int_to_4digit_nodec>
				print(str,8);
    19ce:	68 e0       	ldi	r22, 0x08	; 8
    19d0:	8e ea       	ldi	r24, 0xAE	; 174
    19d2:	91 e2       	ldi	r25, 0x21	; 33
    19d4:	c7 df       	rcall	.-114    	; 0x1964 <print>
    19d6:	e9 cf       	rjmp	.-46     	; 0x19aa <main+0x2>

000019d8 <ProcessCDCCommand>:
}

/* services commands received over the virtual serial port */
void ProcessCDCCommand(void)
{
	ReportStringLength = 0;
    19d8:	10 92 17 26 	sts	0x2617, r1	; 0x802617 <ReportStringLength>
    19dc:	10 92 18 26 	sts	0x2618, r1	; 0x802618 <ReportStringLength+0x1>
	cmd = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	91 e2       	ldi	r25, 0x21	; 33
    19e4:	0e 94 ef 02 	call	0x5de	; 0x5de <CDC_Device_ReceiveByte>
    19e8:	80 93 c9 26 	sts	0x26C9, r24	; 0x8026c9 <cmd>
    19ec:	90 93 ca 26 	sts	0x26CA, r25	; 0x8026ca <cmd+0x1>
	
	if(cmd > -1){
    19f0:	80 91 c9 26 	lds	r24, 0x26C9	; 0x8026c9 <cmd>
    19f4:	90 91 ca 26 	lds	r25, 0x26CA	; 0x8026ca <cmd+0x1>
    19f8:	99 23       	and	r25, r25
    19fa:	0c f4       	brge	.+2      	; 0x19fe <ProcessCDCCommand+0x26>
    19fc:	57 c0       	rjmp	.+174    	; 0x1aac <ProcessCDCCommand+0xd4>
		switch(cmd){	
    19fe:	80 91 c9 26 	lds	r24, 0x26C9	; 0x8026c9 <cmd>
    1a02:	90 91 ca 26 	lds	r25, 0x26CA	; 0x8026ca <cmd+0x1>
    1a06:	80 34       	cpi	r24, 0x40	; 64
    1a08:	91 05       	cpc	r25, r1
    1a0a:	e1 f0       	breq	.+56     	; 0x1a44 <ProcessCDCCommand+0x6c>
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <ProcessCDCCommand+0x40>
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	51 f0       	breq	.+20     	; 0x1a26 <ProcessCDCCommand+0x4e>
    1a12:	c0 97       	sbiw	r24, 0x30	; 48
    1a14:	e1 f1       	breq	.+120    	; 0x1a8e <ProcessCDCCommand+0xb6>
    1a16:	2a c0       	rjmp	.+84     	; 0x1a6c <ProcessCDCCommand+0x94>
    1a18:	8a 35       	cpi	r24, 0x5A	; 90
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <ProcessCDCCommand+0x4e>
    1a1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a20:	91 05       	cpc	r25, r1
    1a22:	b9 f0       	breq	.+46     	; 0x1a52 <ProcessCDCCommand+0x7a>
    1a24:	23 c0       	rjmp	.+70     	; 0x1a6c <ProcessCDCCommand+0x94>
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	87 ea       	ldi	r24, 0xA7	; 167
    1a2a:	91 e6       	ldi	r25, 0x61	; 97
    1a2c:	21 50       	subi	r18, 0x01	; 1
    1a2e:	80 40       	sbci	r24, 0x00	; 0
    1a30:	90 40       	sbci	r25, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <ProcessCDCCommand+0x54>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <ProcessCDCCommand+0x5e>
    1a36:	00 00       	nop
			case 48: //0
				break;
			case 0: //reset when sending 0x00
			case 90: //'Z' - also reset when typing a printable character (fallback for serial terminals that do not support sending non-printable characters)
				_delay_ms(1000);
				CCP				= CCP_IOREG_gc;			//allow changing CLK.CTRL
    1a38:	88 ed       	ldi	r24, 0xD8	; 216
    1a3a:	84 bf       	out	0x34, r24	; 52
				RST.CTRL		= RST_SWRST_bm;			//perform software reset
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
				break;
    1a42:	25 c0       	rjmp	.+74     	; 0x1a8e <ProcessCDCCommand+0xb6>
			case 64: //@ - dump all CAN messages to USB
				output_can_to_serial = 1 - output_can_to_serial;
    1a44:	90 91 22 22 	lds	r25, 0x2222	; 0x802222 <output_can_to_serial>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 1b       	sub	r24, r25
    1a4c:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <output_can_to_serial>
				break;
    1a50:	1e c0       	rjmp	.+60     	; 0x1a8e <ProcessCDCCommand+0xb6>
			case 255: //send ident
				ReportString = "MUXSAN CAN bridge\n"; ReportStringLength = 18;
    1a52:	87 eb       	ldi	r24, 0xB7	; 183
    1a54:	91 e2       	ldi	r25, 0x21	; 33
    1a56:	80 93 54 25 	sts	0x2554, r24	; 0x802554 <ReportString>
    1a5a:	90 93 55 25 	sts	0x2555, r25	; 0x802555 <ReportString+0x1>
    1a5e:	82 e1       	ldi	r24, 0x12	; 18
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	80 93 17 26 	sts	0x2617, r24	; 0x802617 <ReportStringLength>
    1a66:	90 93 18 26 	sts	0x2618, r25	; 0x802618 <ReportStringLength+0x1>
				break;
    1a6a:	11 c0       	rjmp	.+34     	; 0x1a8e <ProcessCDCCommand+0xb6>
					
			default: //when all else fails
				ReportString = "Unrecognized Command:   \n"; ReportStringLength = 25;
    1a6c:	ea ec       	ldi	r30, 0xCA	; 202
    1a6e:	f1 e2       	ldi	r31, 0x21	; 33
    1a70:	e0 93 54 25 	sts	0x2554, r30	; 0x802554 <ReportString>
    1a74:	f0 93 55 25 	sts	0x2555, r31	; 0x802555 <ReportString+0x1>
    1a78:	89 e1       	ldi	r24, 0x19	; 25
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	80 93 17 26 	sts	0x2617, r24	; 0x802617 <ReportStringLength>
    1a80:	90 93 18 26 	sts	0x2618, r25	; 0x802618 <ReportStringLength+0x1>
				ReportString[22] = cmd;
    1a84:	80 91 c9 26 	lds	r24, 0x26C9	; 0x8026c9 <cmd>
    1a88:	90 91 ca 26 	lds	r25, 0x26CA	; 0x8026ca <cmd+0x1>
    1a8c:	86 8b       	std	Z+22, r24	; 0x16
				break;
		}
		if(ReportStringLength){
    1a8e:	80 91 17 26 	lds	r24, 0x2617	; 0x802617 <ReportStringLength>
    1a92:	90 91 18 26 	lds	r25, 0x2618	; 0x802618 <ReportStringLength+0x1>
    1a96:	89 2b       	or	r24, r25
    1a98:	49 f0       	breq	.+18     	; 0x1aac <ProcessCDCCommand+0xd4>
			print(ReportString, ReportStringLength);
    1a9a:	60 91 17 26 	lds	r22, 0x2617	; 0x802617 <ReportStringLength>
    1a9e:	70 91 18 26 	lds	r23, 0x2618	; 0x802618 <ReportStringLength+0x1>
    1aa2:	80 91 54 25 	lds	r24, 0x2554	; 0x802554 <ReportString>
    1aa6:	90 91 55 25 	lds	r25, 0x2555	; 0x802555 <ReportString+0x1>
    1aaa:	5c cf       	rjmp	.-328    	; 0x1964 <print>
    1aac:	08 95       	ret

00001aae <__vector_14>:
		fwrite("X\n",2,1,&USBSerialStream);
	}
}

//fires every 1ms
ISR(TCC0_OVF_vect){	
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	2f 93       	push	r18
    1aba:	3f 93       	push	r19
    1abc:	4f 93       	push	r20
    1abe:	5f 93       	push	r21
    1ac0:	6f 93       	push	r22
    1ac2:	7f 93       	push	r23
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
    1acc:	ef 93       	push	r30
    1ace:	ff 93       	push	r31
	wdt_reset();
    1ad0:	a8 95       	wdr
	ms_timer++;
    1ad2:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <ms_timer>
    1ad6:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <ms_timer+0x1>
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <ms_timer>
    1ae0:	90 93 01 21 	sts	0x2101, r25	; 0x802101 <ms_timer+0x1>
	if(!can_busy) ProcessCDCCommand();
    1ae4:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <can_busy>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <__vector_14+0x40>
    1aec:	75 df       	rcall	.-278    	; 0x19d8 <ProcessCDCCommand>
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	91 e2       	ldi	r25, 0x21	; 33
    1af2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <CDC_Device_USBTask>
	USB_USBTask();
    1af6:	0e 94 38 05 	call	0xa70	; 0xa70 <USB_USBTask>
	
	//handle print buffer
	if(print_char_limit <= 64) { print_char_limit = 0; }
    1afa:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <print_char_limit>
    1afe:	81 34       	cpi	r24, 0x41	; 65
    1b00:	18 f4       	brcc	.+6      	; 0x1b08 <__vector_14+0x5a>
    1b02:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <print_char_limit>
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <__vector_14+0x64>
	else { print_char_limit -= 64; }	
    1b08:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <print_char_limit>
    1b0c:	80 54       	subi	r24, 0x40	; 64
    1b0e:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <print_char_limit>
	
	sec_timer--;	
    1b12:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <sec_timer>
    1b16:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <sec_timer+0x1>
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <sec_timer>
    1b20:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <sec_timer+0x1>
	
	//fires every second
	if(sec_timer == 0){
    1b24:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <sec_timer>
    1b28:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <sec_timer+0x1>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	c1 f4       	brne	.+48     	; 0x1b60 <__vector_14+0xb2>
		PORTB.OUTCLR = (1 << 1);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		sec_timer = 1000;
    1b36:	88 ee       	ldi	r24, 0xE8	; 232
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <sec_timer>
    1b3e:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <sec_timer+0x1>
		sec_interrupt = 1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <sec_interrupt>
		ten_sec_timer--;
    1b48:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <ten_sec_timer>
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <ten_sec_timer>
		
		//fires every 10 seconds
		if(ten_sec_timer == 0){
    1b52:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <ten_sec_timer>
    1b56:	81 11       	cpse	r24, r1
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <__vector_14+0xb2>
			ten_sec_timer = 10;
    1b5a:	8a e0       	ldi	r24, 0x0A	; 10
    1b5c:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <ten_sec_timer>
		}
	}
}
    1b60:	ff 91       	pop	r31
    1b62:	ef 91       	pop	r30
    1b64:	bf 91       	pop	r27
    1b66:	af 91       	pop	r26
    1b68:	9f 91       	pop	r25
    1b6a:	8f 91       	pop	r24
    1b6c:	7f 91       	pop	r23
    1b6e:	6f 91       	pop	r22
    1b70:	5f 91       	pop	r21
    1b72:	4f 91       	pop	r20
    1b74:	3f 91       	pop	r19
    1b76:	2f 91       	pop	r18
    1b78:	0f 90       	pop	r0
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	0f 90       	pop	r0
    1b7e:	1f 90       	pop	r1
    1b80:	18 95       	reti

00001b82 <check_can1>:


void check_can1(void){
	uint8_t reg;
	
	if(tx0_buffer_end != tx0_buffer_pos){
    1b82:	90 91 0e 22 	lds	r25, 0x220E	; 0x80220e <tx0_buffer_end>
    1b86:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <tx0_buffer_pos>
    1b8a:	98 17       	cp	r25, r24
    1b8c:	f1 f0       	breq	.+60     	; 0x1bca <check_can1+0x48>
		//check if TXB0 is free use
		reg = can1_read(MCP_REG_TXB0CTRL);
    1b8e:	80 e3       	ldi	r24, 0x30	; 48
    1b90:	c3 dc       	rcall	.-1658   	; 0x1518 <can1_read>
	
		if(!(reg & MCP_TXREQ_bm)){ //we're free to send
    1b92:	83 fd       	sbrc	r24, 3
    1b94:	1a c0       	rjmp	.+52     	; 0x1bca <check_can1+0x48>
			can1_load_txbuff(0, (can_frame_t *) &tx0_buffer[tx0_buffer_pos++]);
    1b96:	60 91 0f 22 	lds	r22, 0x220F	; 0x80220f <tx0_buffer_pos>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	86 0f       	add	r24, r22
    1b9e:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <tx0_buffer_pos>
    1ba2:	8b e0       	ldi	r24, 0x0B	; 11
    1ba4:	68 9f       	mul	r22, r24
    1ba6:	b0 01       	movw	r22, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	67 5e       	subi	r22, 0xE7	; 231
    1bac:	79 4d       	sbci	r23, 0xD9	; 217
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	25 dc       	rcall	.-1974   	; 0x13fc <can1_load_txbuff>
			can1_rts(0);
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	ca db       	rcall	.-2156   	; 0x134a <can1_rts>
    1bb6:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <tx0_buffer_pos>
			if(tx0_buffer_pos == tx0_buffer_end){ //end of buffer, reset
    1bba:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <tx0_buffer_end>
    1bbe:	98 13       	cpse	r25, r24
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <check_can1+0x48>
    1bc2:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <tx0_buffer_end>
				tx0_buffer_end = 0;
    1bc6:	10 92 0f 22 	sts	0x220F, r1	; 0x80220f <tx0_buffer_pos>
				tx0_buffer_pos = 0;
    1bca:	08 95       	ret

00001bcc <send_can1>:
    1bcc:	ef 92       	push	r14
	if(can_bus == 1) send_can1(frame);
	if(can_bus == 2) send_can2(frame);
	if(can_bus == 3) send_can3(frame);
}

void send_can1(can_frame_t frame){	
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	2b 97       	sbiw	r28, 0x0b	; 11
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	e9 82       	std	Y+1, r14	; 0x01
    1be4:	fa 82       	std	Y+2, r15	; 0x02
    1be6:	0b 83       	std	Y+3, r16	; 0x03
    1be8:	1c 83       	std	Y+4, r17	; 0x04
    1bea:	2d 83       	std	Y+5, r18	; 0x05
    1bec:	3e 83       	std	Y+6, r19	; 0x06
    1bee:	4f 83       	std	Y+7, r20	; 0x07
    1bf0:	58 87       	std	Y+8, r21	; 0x08
    1bf2:	69 87       	std	Y+9, r22	; 0x09
    1bf4:	7a 87       	std	Y+10, r23	; 0x0a
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
	//put in the buffer
	memcpy(&tx0_buffer[tx0_buffer_end++], &frame, sizeof(frame));
    1bf8:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <tx0_buffer_end>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	8a 0f       	add	r24, r26
    1c00:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <tx0_buffer_end>
    1c04:	9b e0       	ldi	r25, 0x0B	; 11
    1c06:	a9 9f       	mul	r26, r25
    1c08:	d0 01       	movw	r26, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	a7 5e       	subi	r26, 0xE7	; 231
    1c0e:	b9 4d       	sbci	r27, 0xD9	; 217
    1c10:	9b e0       	ldi	r25, 0x0B	; 11
    1c12:	fe 01       	movw	r30, r28
    1c14:	31 96       	adiw	r30, 0x01	; 1
    1c16:	01 90       	ld	r0, Z+
    1c18:	0d 92       	st	X+, r0
    1c1a:	9a 95       	dec	r25
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <send_can1+0x4a>
	
	if(tx0_buffer_end >= TXBUFFER_SIZE){ //silently handle buffer overflows
    1c1e:	80 31       	cpi	r24, 0x10	; 16
    1c20:	18 f0       	brcs	.+6      	; 0x1c28 <send_can1+0x5c>
		tx0_buffer_end = TXBUFFER_SIZE - 1;
    1c22:	8f e0       	ldi	r24, 0x0F	; 15
    1c24:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <tx0_buffer_end>
	}
	
	check_can1();
    1c28:	ac df       	rcall	.-168    	; 0x1b82 <check_can1>
}
    1c2a:	2b 96       	adiw	r28, 0x0b	; 11
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	08 95       	ret

00001c3e <check_can2>:
}

void check_can2(void){
	uint8_t reg;
	
	if(tx2_buffer_end != tx2_buffer_pos){
    1c3e:	90 91 0c 22 	lds	r25, 0x220C	; 0x80220c <tx2_buffer_end>
    1c42:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <tx2_buffer_pos>
    1c46:	98 17       	cp	r25, r24
    1c48:	f1 f0       	breq	.+60     	; 0x1c86 <check_can2+0x48>
		//check if TXB0 is free use
		reg = can2_read(MCP_REG_TXB0CTRL);
    1c4a:	80 e3       	ldi	r24, 0x30	; 48
    1c4c:	7a dc       	rcall	.-1804   	; 0x1542 <can2_read>
		
		if(!(reg & MCP_TXREQ_bm)){ //we're free to send
    1c4e:	83 fd       	sbrc	r24, 3
    1c50:	1a c0       	rjmp	.+52     	; 0x1c86 <check_can2+0x48>
			can2_load_txbuff(0, (can_frame_t *) &tx2_buffer[tx2_buffer_pos++]);
    1c52:	60 91 0d 22 	lds	r22, 0x220D	; 0x80220d <tx2_buffer_pos>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	86 0f       	add	r24, r22
    1c5a:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <tx2_buffer_pos>
    1c5e:	8b e0       	ldi	r24, 0x0B	; 11
    1c60:	68 9f       	mul	r22, r24
    1c62:	b0 01       	movw	r22, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	69 59       	subi	r22, 0x99	; 153
    1c68:	7a 4d       	sbci	r23, 0xDA	; 218
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	d4 db       	rcall	.-2136   	; 0x1416 <can2_load_txbuff>
			can2_rts(0);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	79 db       	rcall	.-2318   	; 0x1364 <can2_rts>
    1c72:	90 91 0d 22 	lds	r25, 0x220D	; 0x80220d <tx2_buffer_pos>
			if(tx2_buffer_pos == tx2_buffer_end){ //end of buffer, reset
    1c76:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <tx2_buffer_end>
    1c7a:	98 13       	cpse	r25, r24
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <check_can2+0x48>
    1c7e:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <tx2_buffer_end>
				tx2_buffer_end = 0;
    1c82:	10 92 0d 22 	sts	0x220D, r1	; 0x80220d <tx2_buffer_pos>
				tx2_buffer_pos = 0;
    1c86:	08 95       	ret

00001c88 <send_can2>:
    1c88:	ef 92       	push	r14
			}
		}
	}
}

void send_can2(can_frame_t frame){
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	2b 97       	sbiw	r28, 0x0b	; 11
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	e9 82       	std	Y+1, r14	; 0x01
    1ca0:	fa 82       	std	Y+2, r15	; 0x02
    1ca2:	0b 83       	std	Y+3, r16	; 0x03
    1ca4:	1c 83       	std	Y+4, r17	; 0x04
    1ca6:	2d 83       	std	Y+5, r18	; 0x05
    1ca8:	3e 83       	std	Y+6, r19	; 0x06
    1caa:	4f 83       	std	Y+7, r20	; 0x07
    1cac:	58 87       	std	Y+8, r21	; 0x08
    1cae:	69 87       	std	Y+9, r22	; 0x09
    1cb0:	7a 87       	std	Y+10, r23	; 0x0a
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
	//put in the buffer
	memcpy(&tx2_buffer[tx2_buffer_end++], &frame, sizeof(frame));
    1cb4:	a0 91 0c 22 	lds	r26, 0x220C	; 0x80220c <tx2_buffer_end>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	8a 0f       	add	r24, r26
    1cbc:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <tx2_buffer_end>
    1cc0:	9b e0       	ldi	r25, 0x0B	; 11
    1cc2:	a9 9f       	mul	r26, r25
    1cc4:	d0 01       	movw	r26, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	a9 59       	subi	r26, 0x99	; 153
    1cca:	ba 4d       	sbci	r27, 0xDA	; 218
    1ccc:	9b e0       	ldi	r25, 0x0B	; 11
    1cce:	fe 01       	movw	r30, r28
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	01 90       	ld	r0, Z+
    1cd4:	0d 92       	st	X+, r0
    1cd6:	9a 95       	dec	r25
    1cd8:	e1 f7       	brne	.-8      	; 0x1cd2 <send_can2+0x4a>
	
	if(tx2_buffer_end >= TXBUFFER_SIZE){ //silently handle buffer overflows
    1cda:	80 31       	cpi	r24, 0x10	; 16
    1cdc:	18 f0       	brcs	.+6      	; 0x1ce4 <send_can2+0x5c>
		tx2_buffer_end = TXBUFFER_SIZE - 1;
    1cde:	8f e0       	ldi	r24, 0x0F	; 15
    1ce0:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <tx2_buffer_end>
	}
	
	check_can2();
    1ce4:	ac df       	rcall	.-168    	; 0x1c3e <check_can2>
}
    1ce6:	2b 96       	adiw	r28, 0x0b	; 11
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	08 95       	ret

00001cfa <can_handler>:
	can_busy = 1;
	can_handler(3);
}

//VCM side of the CAN bus (in Muxsan)
void can_handler(uint8_t can_bus){	
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	a3 97       	sbiw	r28, 0x23	; 35
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	b8 2e       	mov	r11, r24
	can_frame_t frame;
		
	char strbuf[] = "1|   |                \n";
    1d1a:	88 e1       	ldi	r24, 0x18	; 24
    1d1c:	e1 ef       	ldi	r30, 0xF1	; 241
    1d1e:	f1 e2       	ldi	r31, 0x21	; 33
    1d20:	de 01       	movw	r26, r28
    1d22:	1c 96       	adiw	r26, 0x0c	; 12
    1d24:	01 90       	ld	r0, Z+
    1d26:	0d 92       	st	X+, r0
    1d28:	8a 95       	dec	r24
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <can_handler+0x2a>
	if(can_bus == 2){ strbuf[0] = 50; }
    1d2c:	22 e0       	ldi	r18, 0x02	; 2
    1d2e:	b2 12       	cpse	r11, r18
    1d30:	03 c0       	rjmp	.+6      	; 0x1d38 <can_handler+0x3e>
    1d32:	82 e3       	ldi	r24, 0x32	; 50
    1d34:	8c 87       	std	Y+12, r24	; 0x0c
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <can_handler+0x48>
	if(can_bus == 3){ strbuf[0] = 51; }
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	b8 12       	cpse	r11, r24
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <can_handler+0x48>
    1d3e:	83 e3       	ldi	r24, 0x33	; 51
    1d40:	8c 87       	std	Y+12, r24	; 0x0c
		
	uint8_t flag = can_read(MCP_REG_CANINTF, can_bus);
    1d42:	6b 2d       	mov	r22, r11
    1d44:	8c e2       	ldi	r24, 0x2C	; 44
    1d46:	27 dc       	rcall	.-1970   	; 0x1596 <can_read>
    1d48:	a8 2e       	mov	r10, r24
		
	if (flag & (MCP_RX0IF | MCP_RX1IF)){		
    1d4a:	83 70       	andi	r24, 0x03	; 3
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <can_handler+0x56>
    1d4e:	71 c0       	rjmp	.+226    	; 0x1e32 <can_handler+0x138>
	
		if(flag & MCP_RX0IF){
    1d50:	a0 fe       	sbrs	r10, 0
    1d52:	0c c0       	rjmp	.+24     	; 0x1d6c <can_handler+0x72>
			can_read_rx_buf(MCP_RX_0, &frame, can_bus);
    1d54:	4b 2d       	mov	r20, r11
    1d56:	be 01       	movw	r22, r28
    1d58:	6f 5f       	subi	r22, 0xFF	; 255
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	80 e9       	ldi	r24, 0x90	; 144
    1d5e:	ce db       	rcall	.-2148   	; 0x14fc <can_read_rx_buf>
			can_bit_modify(MCP_REG_CANINTF, MCP_RX0IF, 0x00, can_bus);
    1d60:	2b 2d       	mov	r18, r11
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	8c e2       	ldi	r24, 0x2C	; 44
    1d68:	99 da       	rcall	.-2766   	; 0x129c <can_bit_modify>
    1d6a:	0b c0       	rjmp	.+22     	; 0x1d82 <can_handler+0x88>
		} else {
			can_read_rx_buf(MCP_RX_1, &frame, can_bus);
    1d6c:	4b 2d       	mov	r20, r11
    1d6e:	be 01       	movw	r22, r28
    1d70:	6f 5f       	subi	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	84 e9       	ldi	r24, 0x94	; 148
    1d76:	c2 db       	rcall	.-2172   	; 0x14fc <can_read_rx_buf>
			can_bit_modify(MCP_REG_CANINTF, MCP_RX1IF, 0x00, can_bus);
    1d78:	2b 2d       	mov	r18, r11
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	8c e2       	ldi	r24, 0x2C	; 44
    1d80:	8d da       	rcall	.-2790   	; 0x129c <can_bit_modify>
		}		
		
		switch(frame.can_id){	
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	8c 3d       	cpi	r24, 0xDC	; 220
    1d88:	91 40       	sbci	r25, 0x01	; 1
    1d8a:	71 f4       	brne	.+28     	; 0x1da8 <can_handler+0xae>
			//sample CAN message modification routine			
			case 0x1DC:	//when we see a CAN message with id 0x1DC....
				frame.data[0] = 0xFF;	//change byte 0 to 0xFF
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	8c 83       	std	Y+4, r24	; 0x04
				frame.data[1] = 0xFF;	//etc. ....
    1d90:	8d 83       	std	Y+5, r24	; 0x05
				frame.data[2] = 0xFF;
    1d92:	8e 83       	std	Y+6, r24	; 0x06
				frame.data[3] = 0xFF;
    1d94:	8f 83       	std	Y+7, r24	; 0x07
				frame.data[4] = 0x1F;	//let's do 0x1F here, just for shits and giggles
    1d96:	9f e1       	ldi	r25, 0x1F	; 31
    1d98:	98 87       	std	Y+8, r25	; 0x08
				frame.data[5] = 0xFF;
    1d9a:	89 87       	std	Y+9, r24	; 0x09
				frame.data[6] = 0xFC;	//I feel like making byte 6 0xFC today
    1d9c:	8c ef       	ldi	r24, 0xFC	; 252
    1d9e:	8a 87       	std	Y+10, r24	; 0x0a
								
				calc_crc8(&frame);		//this routine calculates the CRC using radix 0x85 and puts that CRC in frame.data[7]
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	0e 94 ed 01 	call	0x3da	; 0x3da <calc_crc8>
				break;
		}
		
		
		//if you enable CAN repeating between bus 1 and 2, we end up here	
		if(repeat_can){
    1da8:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <repeat_can>
    1dac:	88 23       	and	r24, r24
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <can_handler+0xb8>
    1db0:	40 c0       	rjmp	.+128    	; 0x1e32 <can_handler+0x138>
			//you can blacklist certain messages or message contents like this, blocking them from both being forwarded and being displayed
			uint8_t blacklist = 0;
			switch(frame.can_id){				
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	8e 39       	cpi	r24, 0x9E	; 158
    1db8:	95 40       	sbci	r25, 0x05	; 5
    1dba:	d9 f1       	breq	.+118    	; 0x1e32 <can_handler+0x138>
				default:
					blacklist = 0;					
					break;
			}
			if(!blacklist){
				if(can_bus == 1){send_can2(frame);} else {send_can1(frame);}
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	b8 12       	cpse	r11, r24
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <can_handler+0xe2>
    1dc2:	e9 80       	ldd	r14, Y+1	; 0x01
    1dc4:	fa 80       	ldd	r15, Y+2	; 0x02
    1dc6:	0b 81       	ldd	r16, Y+3	; 0x03
    1dc8:	1c 81       	ldd	r17, Y+4	; 0x04
    1dca:	2d 81       	ldd	r18, Y+5	; 0x05
    1dcc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dce:	4f 81       	ldd	r20, Y+7	; 0x07
    1dd0:	58 85       	ldd	r21, Y+8	; 0x08
    1dd2:	69 85       	ldd	r22, Y+9	; 0x09
    1dd4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd8:	57 df       	rcall	.-338    	; 0x1c88 <send_can2>
    1dda:	0c c0       	rjmp	.+24     	; 0x1df4 <can_handler+0xfa>
    1ddc:	e9 80       	ldd	r14, Y+1	; 0x01
    1dde:	fa 80       	ldd	r15, Y+2	; 0x02
    1de0:	0b 81       	ldd	r16, Y+3	; 0x03
    1de2:	1c 81       	ldd	r17, Y+4	; 0x04
    1de4:	2d 81       	ldd	r18, Y+5	; 0x05
    1de6:	3e 81       	ldd	r19, Y+6	; 0x06
    1de8:	4f 81       	ldd	r20, Y+7	; 0x07
    1dea:	58 85       	ldd	r21, Y+8	; 0x08
    1dec:	69 85       	ldd	r22, Y+9	; 0x09
    1dee:	7a 85       	ldd	r23, Y+10	; 0x0a
    1df0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1df2:	ec de       	rcall	.-552    	; 0x1bcc <send_can1>
								
				if(output_can_to_serial){
    1df4:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <output_can_to_serial>
    1df8:	88 23       	and	r24, r24
    1dfa:	d9 f0       	breq	.+54     	; 0x1e32 <can_handler+0x138>
					SID_to_str(strbuf + 2, frame.can_id);
    1dfc:	49 81       	ldd	r20, Y+1	; 0x01
    1dfe:	5a 81       	ldd	r21, Y+2	; 0x02
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	ce 01       	movw	r24, r28
    1e06:	0e 96       	adiw	r24, 0x0e	; 14
    1e08:	0e 94 5f 01 	call	0x2be	; 0x2be <SID_to_str>
					canframe_to_str(strbuf + 6, frame);
    1e0c:	c9 80       	ldd	r12, Y+1	; 0x01
    1e0e:	da 80       	ldd	r13, Y+2	; 0x02
    1e10:	eb 80       	ldd	r14, Y+3	; 0x03
    1e12:	fc 80       	ldd	r15, Y+4	; 0x04
    1e14:	0d 81       	ldd	r16, Y+5	; 0x05
    1e16:	1e 81       	ldd	r17, Y+6	; 0x06
    1e18:	2f 81       	ldd	r18, Y+7	; 0x07
    1e1a:	38 85       	ldd	r19, Y+8	; 0x08
    1e1c:	49 85       	ldd	r20, Y+9	; 0x09
    1e1e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	ce 01       	movw	r24, r28
    1e24:	42 96       	adiw	r24, 0x12	; 18
    1e26:	0e 94 96 01 	call	0x32c	; 0x32c <canframe_to_str>
					print(strbuf,23);
    1e2a:	67 e1       	ldi	r22, 0x17	; 23
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	0c 96       	adiw	r24, 0x0c	; 12
			}
		}		
	}
					
	
	if(flag & 0xA0){
    1e30:	99 dd       	rcall	.-1230   	; 0x1964 <print>
    1e32:	8a 2d       	mov	r24, r10
    1e34:	80 7a       	andi	r24, 0xA0	; 160
		uint8_t flag2 = can_read(MCP_REG_EFLG, can_bus);
    1e36:	11 f1       	breq	.+68     	; 0x1e7c <can_handler+0x182>
    1e38:	6b 2d       	mov	r22, r11
    1e3a:	8d e2       	ldi	r24, 0x2D	; 45
    1e3c:	ac db       	rcall	.-2216   	; 0x1596 <can_read>
		if(flag2 & 0xC0){
    1e3e:	18 2f       	mov	r17, r24
    1e40:	80 7c       	andi	r24, 0xC0	; 192
			can_write(MCP_REG_EFLG, 0, can_bus); //reset all errors
    1e42:	81 f0       	breq	.+32     	; 0x1e64 <can_handler+0x16a>
    1e44:	4b 2d       	mov	r20, r11
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	8d e2       	ldi	r24, 0x2D	; 45
    1e4a:	9f dc       	rcall	.-1730   	; 0x178a <can_write>
			ReportString = "CANX RX OVF\n";
    1e4c:	e4 ee       	ldi	r30, 0xE4	; 228
    1e4e:	f1 e2       	ldi	r31, 0x21	; 33
    1e50:	e0 93 54 25 	sts	0x2554, r30	; 0x802554 <ReportString>
    1e54:	f0 93 55 25 	sts	0x2555, r31	; 0x802555 <ReportString+0x1>
			ReportString[3] = 48 + can_bus;
    1e58:	80 e3       	ldi	r24, 0x30	; 48
    1e5a:	8b 0d       	add	r24, r11
			print(ReportString,12);
    1e5c:	83 83       	std	Z+3, r24	; 0x03
    1e5e:	6c e0       	ldi	r22, 0x0C	; 12
    1e60:	cf 01       	movw	r24, r30
    1e62:	80 dd       	rcall	.-1280   	; 0x1964 <print>
		}
		if(flag2 > 0){ PORTB.OUTSET = (1 << 1); }
    1e64:	11 23       	and	r17, r17
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <can_handler+0x174>
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    1e6e:	6a 2d       	mov	r22, r10
		if(flag & 0xE0){ can_bit_modify(MCP_REG_CANINTF, (flag & 0xE0), 0x00, can_bus);	}
    1e70:	60 7e       	andi	r22, 0xE0	; 224
    1e72:	21 f0       	breq	.+8      	; 0x1e7c <can_handler+0x182>
    1e74:	2b 2d       	mov	r18, r11
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	8c e2       	ldi	r24, 0x2C	; 44
    1e7a:	10 da       	rcall	.-3040   	; 0x129c <can_bit_modify>
	}
	can_busy = 0;
    1e7c:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <can_busy>
}
    1e80:	a3 96       	adiw	r28, 0x23	; 35
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	08 95       	ret

00001e9c <__vector_64>:
	check_can2();
	check_can3();
}

//can1 interrupt
ISR(PORTD_INT0_vect){
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	ef 93       	push	r30
    1ebc:	ff 93       	push	r31
	can_busy = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <can_busy>
	can_handler(1);
    1ec4:	1a df       	rcall	.-460    	; 0x1cfa <can_handler>
}
    1ec6:	ff 91       	pop	r31
    1ec8:	ef 91       	pop	r30
    1eca:	bf 91       	pop	r27
    1ecc:	af 91       	pop	r26
    1ece:	9f 91       	pop	r25
    1ed0:	8f 91       	pop	r24
    1ed2:	7f 91       	pop	r23
    1ed4:	6f 91       	pop	r22
    1ed6:	5f 91       	pop	r21
    1ed8:	4f 91       	pop	r20
    1eda:	3f 91       	pop	r19
    1edc:	2f 91       	pop	r18
    1ede:	0f 90       	pop	r0
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	0f 90       	pop	r0
    1ee4:	1f 90       	pop	r1
    1ee6:	18 95       	reti

00001ee8 <__vector_65>:

//can2 interrupt
ISR(PORTD_INT1_vect){
    1ee8:	1f 92       	push	r1
    1eea:	0f 92       	push	r0
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	0f 92       	push	r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	2f 93       	push	r18
    1ef4:	3f 93       	push	r19
    1ef6:	4f 93       	push	r20
    1ef8:	5f 93       	push	r21
    1efa:	6f 93       	push	r22
    1efc:	7f 93       	push	r23
    1efe:	8f 93       	push	r24
    1f00:	9f 93       	push	r25
    1f02:	af 93       	push	r26
    1f04:	bf 93       	push	r27
    1f06:	ef 93       	push	r30
    1f08:	ff 93       	push	r31
	can_busy = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <can_busy>
	can_handler(2);
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	f3 de       	rcall	.-538    	; 0x1cfa <can_handler>
}
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <__vector_2>:

//can3 receive interrupt
ISR(PORTC_INT0_vect){
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	4f 93       	push	r20
    1f46:	5f 93       	push	r21
    1f48:	6f 93       	push	r22
    1f4a:	7f 93       	push	r23
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	af 93       	push	r26
    1f52:	bf 93       	push	r27
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
	can_busy = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <can_busy>
	can_handler(3);
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	cc de       	rcall	.-616    	; 0x1cfa <can_handler>
}
    1f62:	ff 91       	pop	r31
    1f64:	ef 91       	pop	r30
    1f66:	bf 91       	pop	r27
    1f68:	af 91       	pop	r26
    1f6a:	9f 91       	pop	r25
    1f6c:	8f 91       	pop	r24
    1f6e:	7f 91       	pop	r23
    1f70:	6f 91       	pop	r22
    1f72:	5f 91       	pop	r21
    1f74:	4f 91       	pop	r20
    1f76:	3f 91       	pop	r19
    1f78:	2f 91       	pop	r18
    1f7a:	0f 90       	pop	r0
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	0f 90       	pop	r0
    1f80:	1f 90       	pop	r1
    1f82:	18 95       	reti

00001f84 <check_can3>:
}

void check_can3(void){
	uint8_t reg;
	
	if(tx3_buffer_end != tx3_buffer_pos){
    1f84:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <__data_end>
    1f88:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <tx3_buffer_pos>
    1f8c:	98 17       	cp	r25, r24
    1f8e:	f1 f0       	breq	.+60     	; 0x1fcc <check_can3+0x48>
		//check if TXB0 is free use
		reg = can3_read(MCP_REG_TXB0CTRL);
    1f90:	80 e3       	ldi	r24, 0x30	; 48
    1f92:	ec da       	rcall	.-2600   	; 0x156c <can3_read>
		
		if(!(reg & MCP_TXREQ_bm)){ //we're free to send
    1f94:	83 fd       	sbrc	r24, 3
    1f96:	1a c0       	rjmp	.+52     	; 0x1fcc <check_can3+0x48>
			can3_load_txbuff(0, (can_frame_t *) &tx3_buffer[tx3_buffer_pos++]);
    1f98:	60 91 0b 22 	lds	r22, 0x220B	; 0x80220b <tx3_buffer_pos>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	86 0f       	add	r24, r22
    1fa0:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <tx3_buffer_pos>
    1fa4:	8b e0       	ldi	r24, 0x0B	; 11
    1fa6:	68 9f       	mul	r22, r24
    1fa8:	b0 01       	movw	r22, r0
    1faa:	11 24       	eor	r1, r1
    1fac:	63 5e       	subi	r22, 0xE3	; 227
    1fae:	7a 4d       	sbci	r23, 0xDA	; 218
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	3e da       	rcall	.-2948   	; 0x1430 <can3_load_txbuff>
			can3_rts(0);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	e3 d9       	rcall	.-3130   	; 0x137e <can3_rts>
    1fb8:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <tx3_buffer_pos>
			if(tx3_buffer_pos == tx3_buffer_end){ //end of buffer, reset
    1fbc:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <__data_end>
    1fc0:	98 13       	cpse	r25, r24
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <check_can3+0x48>
    1fc4:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <__data_end>
				tx3_buffer_end = 0;
    1fc8:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <tx3_buffer_pos>
				tx3_buffer_pos = 0;
    1fcc:	08 95       	ret

00001fce <__vector_20>:
    1fce:	1f 92       	push	r1
		}
	}
}

//fires approx. every 100us
ISR(TCC1_OVF_vect){
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	2f 93       	push	r18
    1fda:	3f 93       	push	r19
    1fdc:	4f 93       	push	r20
    1fde:	5f 93       	push	r21
    1fe0:	6f 93       	push	r22
    1fe2:	7f 93       	push	r23
    1fe4:	8f 93       	push	r24
    1fe6:	9f 93       	push	r25
    1fe8:	af 93       	push	r26
    1fea:	bf 93       	push	r27
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
	check_can1();
    1ff0:	c8 dd       	rcall	.-1136   	; 0x1b82 <check_can1>
	check_can2();
    1ff2:	25 de       	rcall	.-950    	; 0x1c3e <check_can2>
	check_can3();
    1ff4:	c7 df       	rcall	.-114    	; 0x1f84 <check_can3>
    1ff6:	ff 91       	pop	r31
}
    1ff8:	ef 91       	pop	r30
    1ffa:	bf 91       	pop	r27
    1ffc:	af 91       	pop	r26
    1ffe:	9f 91       	pop	r25
    2000:	8f 91       	pop	r24
    2002:	7f 91       	pop	r23
    2004:	6f 91       	pop	r22
    2006:	5f 91       	pop	r21
    2008:	4f 91       	pop	r20
    200a:	3f 91       	pop	r19
    200c:	2f 91       	pop	r18
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	0f 90       	pop	r0
    2014:	1f 90       	pop	r1
    2016:	18 95       	reti

00002018 <__udivmodhi4>:
    2018:	aa 1b       	sub	r26, r26
    201a:	bb 1b       	sub	r27, r27
    201c:	51 e1       	ldi	r21, 0x11	; 17
    201e:	07 c0       	rjmp	.+14     	; 0x202e <__udivmodhi4_ep>

00002020 <__udivmodhi4_loop>:
    2020:	aa 1f       	adc	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	a6 17       	cp	r26, r22
    2026:	b7 07       	cpc	r27, r23
    2028:	10 f0       	brcs	.+4      	; 0x202e <__udivmodhi4_ep>
    202a:	a6 1b       	sub	r26, r22
    202c:	b7 0b       	sbc	r27, r23

0000202e <__udivmodhi4_ep>:
    202e:	88 1f       	adc	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	5a 95       	dec	r21
    2034:	a9 f7       	brne	.-22     	; 0x2020 <__udivmodhi4_loop>
    2036:	80 95       	com	r24
    2038:	90 95       	com	r25
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	08 95       	ret

00002040 <__tablejump2__>:
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	05 90       	lpm	r0, Z+
    2046:	f4 91       	lpm	r31, Z
    2048:	e0 2d       	mov	r30, r0
    204a:	09 94       	ijmp

0000204c <__umulhisi3>:
    204c:	a2 9f       	mul	r26, r18
    204e:	b0 01       	movw	r22, r0
    2050:	b3 9f       	mul	r27, r19
    2052:	c0 01       	movw	r24, r0
    2054:	a3 9f       	mul	r26, r19
    2056:	70 0d       	add	r23, r0
    2058:	81 1d       	adc	r24, r1
    205a:	11 24       	eor	r1, r1
    205c:	91 1d       	adc	r25, r1
    205e:	b2 9f       	mul	r27, r18
    2060:	70 0d       	add	r23, r0
    2062:	81 1d       	adc	r24, r1
    2064:	11 24       	eor	r1, r1
    2066:	91 1d       	adc	r25, r1
    2068:	08 95       	ret

0000206a <fwrite>:
    206a:	a0 e0       	ldi	r26, 0x00	; 0
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	ea e3       	ldi	r30, 0x3A	; 58
    2070:	f0 e1       	ldi	r31, 0x10	; 16
    2072:	33 c0       	rjmp	.+102    	; 0x20da <__prologue_saves__+0xc>
    2074:	5b 01       	movw	r10, r22
    2076:	4a 01       	movw	r8, r20
    2078:	79 01       	movw	r14, r18
    207a:	d9 01       	movw	r26, r18
    207c:	13 96       	adiw	r26, 0x03	; 3
    207e:	2c 91       	ld	r18, X
    2080:	21 ff       	sbrs	r18, 1
    2082:	1d c0       	rjmp	.+58     	; 0x20be <fwrite+0x54>
    2084:	c0 e0       	ldi	r28, 0x00	; 0
    2086:	d0 e0       	ldi	r29, 0x00	; 0
    2088:	c8 15       	cp	r28, r8
    208a:	d9 05       	cpc	r29, r9
    208c:	d9 f0       	breq	.+54     	; 0x20c4 <fwrite+0x5a>
    208e:	8c 01       	movw	r16, r24
    2090:	6c 01       	movw	r12, r24
    2092:	ca 0c       	add	r12, r10
    2094:	db 1c       	adc	r13, r11
    2096:	c8 01       	movw	r24, r16
    2098:	0c 15       	cp	r16, r12
    209a:	1d 05       	cpc	r17, r13
    209c:	71 f0       	breq	.+28     	; 0x20ba <fwrite+0x50>
    209e:	0f 5f       	subi	r16, 0xFF	; 255
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	d7 01       	movw	r26, r14
    20a4:	18 96       	adiw	r26, 0x08	; 8
    20a6:	ed 91       	ld	r30, X+
    20a8:	fc 91       	ld	r31, X
    20aa:	19 97       	sbiw	r26, 0x09	; 9
    20ac:	b7 01       	movw	r22, r14
    20ae:	dc 01       	movw	r26, r24
    20b0:	8c 91       	ld	r24, X
    20b2:	09 95       	icall
    20b4:	89 2b       	or	r24, r25
    20b6:	79 f3       	breq	.-34     	; 0x2096 <fwrite+0x2c>
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <fwrite+0x5a>
    20ba:	21 96       	adiw	r28, 0x01	; 1
    20bc:	e5 cf       	rjmp	.-54     	; 0x2088 <fwrite+0x1e>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <fwrite+0x5c>
    20c4:	ce 01       	movw	r24, r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	ec e0       	ldi	r30, 0x0C	; 12
    20cc:	1f c0       	rjmp	.+62     	; 0x210c <__epilogue_restores__+0xc>

000020ce <__prologue_saves__>:
    20ce:	2f 92       	push	r2
    20d0:	3f 92       	push	r3
    20d2:	4f 92       	push	r4
    20d4:	5f 92       	push	r5
    20d6:	6f 92       	push	r6
    20d8:	7f 92       	push	r7
    20da:	8f 92       	push	r8
    20dc:	9f 92       	push	r9
    20de:	af 92       	push	r10
    20e0:	bf 92       	push	r11
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	ca 1b       	sub	r28, r26
    20f8:	db 0b       	sbc	r29, r27
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	09 94       	ijmp

00002100 <__epilogue_restores__>:
    2100:	2a 88       	ldd	r2, Y+18	; 0x12
    2102:	39 88       	ldd	r3, Y+17	; 0x11
    2104:	48 88       	ldd	r4, Y+16	; 0x10
    2106:	5f 84       	ldd	r5, Y+15	; 0x0f
    2108:	6e 84       	ldd	r6, Y+14	; 0x0e
    210a:	7d 84       	ldd	r7, Y+13	; 0x0d
    210c:	8c 84       	ldd	r8, Y+12	; 0x0c
    210e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2110:	aa 84       	ldd	r10, Y+10	; 0x0a
    2112:	b9 84       	ldd	r11, Y+9	; 0x09
    2114:	c8 84       	ldd	r12, Y+8	; 0x08
    2116:	df 80       	ldd	r13, Y+7	; 0x07
    2118:	ee 80       	ldd	r14, Y+6	; 0x06
    211a:	fd 80       	ldd	r15, Y+5	; 0x05
    211c:	0c 81       	ldd	r16, Y+4	; 0x04
    211e:	1b 81       	ldd	r17, Y+3	; 0x03
    2120:	aa 81       	ldd	r26, Y+2	; 0x02
    2122:	b9 81       	ldd	r27, Y+1	; 0x01
    2124:	ce 0f       	add	r28, r30
    2126:	d1 1d       	adc	r29, r1
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	ed 01       	movw	r28, r26
    212e:	08 95       	ret

00002130 <_exit>:
    2130:	f8 94       	cli

00002132 <__stop_program>:
    2132:	ff cf       	rjmp	.-2      	; 0x2132 <__stop_program>
